#include "Robonii_sound.h"

#include "..\XTimer\XTimer.h"
#include "..\dma_driver\dma_driver.h"

//#include <avr/io.h>
//#include <compat/deprecated.h>




/* === Global variables ======================================================================== */
uint16_t next_buffer_length;
uint8_t sound_buffer0[SOUND_BUFFER_SIZE];
uint8_t sound_buffer1[SOUND_BUFFER_SIZE];
volatile uint8_t active_buffer;
volatile uint8_t buffer_switched;


Sound_t SoundArray;							/**< Audio object of structure type Sound_t. */
unsigned char toneFrequency;			/**< Analog signal frequency. */
volatile uint8_t toneCounter;					/**< This variable is used to go through the sequence of tones. */
signed char arraySize;					/**< The user specified array size (number of tones). */

int currentIndex = 0;					/**< Current index in the audio arrays. */
uint8_t soundPlaySpeed;					/**< 1/tempo at which sound is played back */
SoundPriority prev_sound_priority;

sound_type_e current_sound_type;

volatile uint8_t simpleToneCount = 0;
volatile uint8_t simpleToneCountDirection = 0;



uint32_t flashStart;
uint16_t flashLen;
uint16_t currentFlashIndex;
volatile uint16_t flashPlayCount;
uint8_t stepSize;
volatile uint8_t flashSoundActive;


int8_t sound_volume_mult, sound_volume_div;

/* === Function prototypes ======================================================================== */

//static uint8_t apply_sound_volume(void);
//static void dma_play_sound( void );


const uint8_t sinetableshort[] PROGMEM = 
     {0x80, 0x98, 0xb0, 0xc7, 0xda, 0xea, 0xf6, 0xfd, 0xff, 0xfd, 0xf6, 0xea, 0xda, 0xc7, 0xb0, 0x98, 
      0x80, 0x67, 0x4f, 0x38, 0x25, 0x15, 0x09, 0x02, 0x00, 0x02, 0x09, 0x15, 0x25, 0x38, 0x4f, 0x67};

const uint8_t sinetable[] PROGMEM = {     
	0x80,0x83,0x86,0x89,0x8c,0x8f,0x92,0x95,0x98,0x9c,0x9f,0xa2,0xa5,0xa8,0xab,0xae,
	0xb0,0xb3,0xb6,0xb9,0xbc,0xbf,0xc1,0xc4,0xc7,0xc9,0xcc,0xce,0xd1,0xd3,0xd5,0xd8,
	0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xed,0xef,0xf0,0xf2,0xf3,0xf5,
	0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfc,0xfd,0xfe,0xfe,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xfe,0xfd,0xfc,0xfc,0xfb,0xfa,0xf9,0xf8,0xf7,
	0xf6,0xf5,0xf3,0xf2,0xf0,0xef,0xed,0xec,0xea,0xe8,0xe6,0xe4,0xe2,0xe0,0xde,0xdc,
	0xda,0xd8,0xd5,0xd3,0xd1,0xce,0xcc,0xc9,0xc7,0xc4,0xc1,0xbf,0xbc,0xb9,0xb6,0xb3,
	0xb0,0xae,0xab,0xa8,0xa5,0xa2,0x9f,0x9c,0x98,0x95,0x92,0x8f,0x8c,0x89,0x86,0x83,
	0x80,0x7c,0x79,0x76,0x73,0x70,0x6d,0x6a,0x67,0x63,0x60,0x5d,0x5a,0x57,0x54,0x51,
	0x4f,0x4c,0x49,0x46,0x43,0x40,0x3e,0x3b,0x38,0x36,0x33,0x31,0x2e,0x2c,0x2a,0x27,
	0x25,0x23,0x21,0x1f,0x1d,0x1b,0x19,0x17,0x15,0x13,0x12,0x10,0x0f,0x0d,0x0c,0x0a,
	0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x03,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x05,0x06,0x07,0x08,
	0x09,0x0a,0x0c,0x0d,0x0f,0x10,0x12,0x13,0x15,0x17,0x19,0x1b,0x1d,0x1f,0x21,0x23,
	0x25,0x27,0x2a,0x2c,0x2e,0x31,0x33,0x36,0x38,0x3b,0x3e,0x40,0x43,0x46,0x49,0x4c,
	0x4f,0x51,0x54,0x57,0x5a,0x5d,0x60,0x63,0x67,0x6a,0x6d,0x70,0x73,0x76,0x79,0x7c};



/* begin binary data: */
const uint8_t ah[] PROGMEM = /* 3244 */
{/*0x80,0x80,0x80,0x80,0x80,0x81,0x81,0x81,0x80,0x7F,0x80,0x80,0x7F,0x7F,0x7F,0x7F,0x80,0x82,0x81,0x80,0x80,0x7F,0x80,0x81,0x82,0x82,0x80,0x7E,0x7F,0x80,0x81,0x80,0x7F,0x7E,0x81,0x83,0x83,0x81,0x81,0x80,0x7F,0x81,0x81,0x81,0x7E,0x7E,0x7E,0x7F,0x7F,0x7F,0x7F,0x81,0x84,0x84,0x83,0x81,0x80,0x7F,0x80,0x80,0x80,0x7E,0x7C,0x7C,0x7E,0x81,0x81,0x7F,0x80,0x84,0x85,0x86,0x84,0x81,0x7D,0x7E,0x7E,0x81,0x7E,0x7C,0x7C,0x7C,0x7F,0x80,0x7F,0x7F,0x81,0x84,0x85,0x83,0x81,0x80,0x7F,0x7F,0x81,0x81,0x7F,0x7D,0x7C,0x7D
,*/0x7F,0x7F,0x7C,0x7D,0x81,0x83,0x84,0x83,0x81,0x80,0x80,0x81,0x82,0x82,0x80,0x80,0x81,0x81,0x80,0x7F,0x7D,0x7C,0x7D,0x81,0x82,0x80,0x7A,0x7A,0x7E,0x84,0x86,0x85,0x86,0x86,0x81,0x7D,0x7E,0x7F,0x79,0x78,0x7E,0x80,0x7D,0x7D,0x81,0x83,0x83,0x83,0x84,0x81,0x7D,0x7C,0x7C,0x7C,0x7C,0x7B,0x7C,0x7E,0x82,0x86,0x87,0x86,0x82,0x7D,0x7A,0x7B,0x7E,0x81,0x7E,0x7A,0x7D,0x84,0x84,0x86,0x87,0x83,0x7D,0x79,0x7A,0x78,0x74,0x72,0x74,0x77,0x7D,0x85,0x8D,0x91,0x91,0x90,0x8F,0x8C,0x85,0x7C,0x75,0x70,0x71,0x71,0x72,0x77
#ifndef SOUND_MINIMUM
,0x7A,0x7C,0x7C,0x83,0x8C,0x90,0x8C,0x80,0x77,0x73,0x75,0x7E,0x8A,0x92,0x95,0x93,0x91,0x8B,0x85,0x80,0x7B,0x73,0x6A,0x5F,0x59,0x63,0x73,0x7F,0x86,0x8B,0x8F,0x8F,0x92,0x93,0x94,0x94,0x98,0x98,0x8B,0x7D,0x7D,0x7E,0x77,0x69,0x67,0x6C,0x6A,0x67,0x6D,0x78,0x7B,0x7A,0x7C,0x81,0x86,0x88,0x8F,0x98,0x9E,0xA3,0xAA,0xA0,0x90,0x86,0x83,0x7A,0x63,0x4E,0x52,0x5F,0x62,0x6A,0x73,0x75,0x73,0x7A,0x8B,0x96,0x96,0x94,0x8E,0x85,0x82,0x82,0x7B,0x71,0x77,0x8E,0x9A,0x99,0x98,0x9E,0xA9,0xAB,0xA4,0x97,0x7D,0x5A,0x45,0x50
,0x61,0x57,0x4F,0x58,0x62,0x7A,0x97,0xA0,0x8A,0x75,0x92,0xAD,0x95,0x78,0x77,0x82,0x8C,0x8D,0x92,0xA1,0xA2,0x93,0x98,0xAD,0xA0,0x6E,0x49,0x34,0x3A,0x53,0x6D,0x8C,0x82,0x6C,0x60,0x6B,0x8E,0xA9,0xA8,0x8A,0x71,0x83,0xA2,0xB9,0xB0,0x87,0x78,0x83,0x81,0x6B,0x51,0x4C,0x5A,0x64,0x73,0x8B,0x94,0x81,0x69,0x75,0x99,0xA9,0xA9,0x92,0x75,0x5B,0x53,0x71,0x96,0xAC,0x9F,0x95,0x9A,0xA0,0xB1,0xB4,0x91,0x66,0x5C,0x6F,0x68,0x44,0x41,0x62,0x71,0x6A,0x6A,0x77,0x85,0x87,0x8B,0x9C,0x9B,0x82,0x73,0x87,0xA0,0x99,0x88,0x83
,0x83,0x94,0xB0,0xC1,0xA5,0x69,0x59,0x60,0x64,0x64,0x5F,0x65,0x63,0x55,0x58,0x78,0x9A,0x93,0x7D,0x78,0x7C,0x8B,0xA2,0xB1,0xA8,0x8F,0x81,0x88,0xA6,0xB8,0x98,0x77,0x78,0x7A,0x65,0x40,0x38,0x59,0x70,0x64,0x61,0x74,0x87,0x96,0x9E,0xA1,0x98,0x76,0x5C,0x67,0x98,0xB2,0xA2,0x8C,0x7E,0x85,0xA5,0xC7,0xC0,0x88,0x66,0x69,0x60,0x4D,0x3F,0x44,0x58,0x64,0x69,0x84,0xAB,0xB0,0x8C,0x70,0x66,0x6A,0x82,0xA1,0xB5,0xA3,0x8A,0x78,0x7E,0xAA,0xC8,0xBD,0x85,0x5D,0x6D,0x6A,0x46,0x3E,0x54,0x62,0x5C,0x55,0x6B,0xA2,0xBA,0xA0
,0x89,0x78,0x65,0x66,0x88,0xB4,0xBA,0xA2,0x81,0x72,0x97,0xB8,0xB2,0x8A,0x72,0x77,0x61,0x37,0x33,0x59,0x6D,0x63,0x5D,0x70,0x9A,0xB7,0xA6,0x90,0x76,0x59,0x62,0x8A,0xB7,0xBD,0xA5,0x86,0x76,0x97,0xB4,0xA7,0x8C,0x7E,0x79,0x5B,0x2E,0x2A,0x5C,0x77,0x64,0x5D,0x77,0x9C,0xB2,0x9F,0x8A,0x77,0x5C,0x65,0x8C,0xBB,0xC1,0xA2,0x83,0x73,0x95,0xBB,0xA7,0x86,0x80,0x76,0x54,0x31,0x32,0x5E,0x7A,0x63,0x5A,0x7C,0xA2,0xAE,0x97,0x81,0x70,0x5E,0x6C,0x9A,0xBF,0xBD,0x99,0x7A,0x79,0x9B,0xBE,0xA5,0x7F,0x7B,0x76,0x54,0x33,0x35
,0x5B,0x7A,0x69,0x59,0x7A,0xA6,0xAD,0x9B,0x83,0x6B,0x5D,0x6C,0x96,0xB8,0xBC,0x9C,0x7D,0x80,0x9B,0xB0,0x9D,0x85,0x91,0x86,0x49,0x20,0x3A,0x62,0x78,0x6B,0x54,0x74,0xA6,0xA9,0x9B,0x93,0x76,0x58,0x5B,0x8A,0xB3,0xBF,0xA4,0x83,0x88,0x9A,0xA6,0x98,0x8B,0x97,0x88,0x49,0x1B,0x39,0x66,0x72,0x67,0x5E,0x7F,0xA5,0x9F,0x98,0x93,0x76,0x61,0x65,0x8B,0xAF,0xBD,0xA8,0x81,0x87,0x9F,0x9C,0x8F,0x94,0x9E,0x7D,0x3C,0x1D,0x44,0x74,0x71,0x5F,0x61,0x83,0xA6,0x9F,0x98,0x90,0x71,0x61,0x69,0x8F,0xB0,0xB8,0xA5,0x84,0x87,0x99
,0x92,0x8B,0x9E,0x9E,0x74,0x43,0x1E,0x33,0x78,0x7F,0x5E,0x61,0x82,0x9E,0xA4,0xA1,0x8F,0x70,0x5B,0x63,0x8B,0xB4,0xB5,0x9B,0x88,0x8F,0x9B,0x8F,0x8D,0xA8,0xAA,0x6F,0x30,0x2A,0x4D,0x72,0x67,0x58,0x6D,0x87,0x94,0xA3,0xA0,0x86,0x72,0x66,0x6A,0x87,0xB2,0xB7,0xA0,0x8D,0x86,0x92,0x92,0x8D,0xA3,0xB1,0x7B,0x28,0x21,0x4B,0x75,0x7A,0x5B,0x5D,0x84,0x98,0xA1,0xA3,0x94,0x7A,0x5B,0x62,0x85,0xAF,0xB8,0xA7,0x96,0x8B,0x8F,0x85,0x88,0xA7,0xAD,0x75,0x36,0x2F,0x3F,0x62,0x7D,0x65,0x62,0x84,0x93,0xA1,0xA2,0x93,0x7D,0x61
,0x62,0x7E,0xA9,0xBC,0xA7,0x8F,0x88,0x92,0x90,0x8A,0x9C,0xA8,0x81,0x3A,0x20,0x43,0x6D,0x78,0x5F,0x5F,0x84,0x97,0xA4,0xA4,0x8B,0x74,0x61,0x67,0x7F,0xA4,0xB8,0xA5,0x8F,0x84,0x8B,0x96,0x93,0x99,0xA9,0x98,0x4C,0x19,0x3A,0x68,0x78,0x62,0x54,0x71,0x8A,0x9C,0xA3,0x99,0x84,0x67,0x5F,0x73,0x94,0xAD,0xA8,0x97,0x8B,0x88,0x87,0x88,0xA2,0xC2,0xBB,0x75,0x36,0x3D,0x59,0x6E,0x65,0x52,0x61,0x71,0x83,0x94,0x9D,0x95,0x73,0x59,0x69,0x8A,0xA7,0xAC,0x9C,0x8B,0x85,0x8A,0x8D,0x9F,0xBC,0xC3,0x8E,0x46,0x35,0x48,0x6A,0x71
,0x53,0x50,0x6B,0x88,0x9C,0xA1,0x93,0x76,0x61,0x65,0x7E,0xA5,0xB5,0x9E,0x85,0x7F,0x8C,0x90,0x98,0xB4,0xC6,0x9F,0x4D,0x31,0x4B,0x69,0x6A,0x53,0x53,0x67,0x7B,0x93,0xA6,0xA1,0x87,0x68,0x61,0x71,0x92,0xAD,0xA7,0x96,0x88,0x85,0x7F,0x8B,0xAF,0xD0,0xBC,0x69,0x37,0x44,0x5D,0x67,0x55,0x51,0x5F,0x6B,0x7F,0x95,0xA8,0x9A,0x76,0x60,0x66,0x84,0xA6,0xAB,0x9F,0x89,0x7C,0x73,0x7B,0xA2,0xCF,0xD2,0x8C,0x51,0x50,0x65,0x74,0x61,0x4D,0x53,0x5C,0x6D,0x84,0x9D,0xA0,0x80,0x64,0x5F,0x77,0x9D,0xAE,0xA2,0x8C,0x81,0x73,0x6C
//,0x88,0xC3,0xE4,0xB5,0x71,0x56,0x5A,0x76,0x75,0x58,0x4F,0x4D,0x59,0x6D,0x8A,0xA0,0x8F,0x71,0x61,0x6E,0x88,0x9F,0xAD,0xA0,0x8B,0x77,0x5E,0x67,0x9E,0xDF,0xD9,0x9D,0x6E,0x5E,0x78,0x83,0x67,0x53,0x4B,0x4E,0x58,0x69,0x8A,0x95,0x88,0x6B,0x5C,0x72,0x92,0xAD,0xAA,0x97,0x85,0x6C,0x5B,0x75,0xBB,0xE1,0xC6,0x93,0x63,0x6E,0x84,0x75,0x64,0x53,0x45,0x4D,0x58,0x7A,0x98,0x91,0x78,0x67,0x6C,0x7B,0x9B,0xAB,0xA1,0x94,0x7E,0x62,0x56,0x85,0xC8,0xDF,0xBF,0x7E,0x6B,0x7B,0x80,0x73,0x5D,0x4C,0x49,0x4D,0x58,0x75,0x97,0x95
,0x7B,0x68,0x62,0x7F,0xA6,0xB3,0xA8,0x8E,0x75,0x5A,0x5F,0x8D,0xC5,0xD6,0xAF,0x8B,0x79,0x76,0x79,0x6D,0x61,0x53,0x41,0x42,0x5B,0x7F,0x93,0x99,0x8A,0x6F,0x69,0x75,0x96,0xAE,0xA5,0x92,0x74,0x60,0x65,0x8A,0xBA,0xCA,0xBE,0x9F,0x85,0x72,0x63,0x67,0x63,0x54,0x47,0x3B,0x4D,0x73,0x94,0xA1,0x95,0x7F,0x67,0x6C,0x89,0xA6,0xAF,0x96,0x7D,0x6B,0x6D,0x81,0x99,0xB4,0xC2,0xB7,0x99,0x7A,0x61,0x5E,0x65,0x5F,0x50,0x43,0x49,0x5C,0x78,0x98,0xAA,0x9B,0x7D,0x66,0x6F,0x8B,0xA5,0xA8,0x8F,0x84,0x80,0x75,0x71,0x8D,0xBA,0xD1
,0xC0,0x8E,0x5F,0x5D,0x65,0x5F,0x56,0x4A,0x47,0x48,0x61,0x89,0xAA,0xB0,0x94,0x76,0x61,0x70,0x98,0xA9,0x9F,0x83,0x77,0x7D,0x77,0x7C,0xA1,0xC9,0xCE,0xB2,0x7E,0x5E,0x61,0x56,0x5A,0x57,0x43,0x3F,0x4B,0x6C,0x95,0xB2,0xAE,0x86,0x67,0x65,0x82,0xAB,0xA7,0x8D,0x7E,0x7C,0x7B,0x74,0x83,0xAC,0xD7,0xCC,0x9C,0x68,0x52,0x65,0x6C,0x5F,0x4A,0x40,0x45,0x59,0x7C,0xA3,0xAB,0x94,0x72,0x65,0x73,0x98,0xB6,0xA3,0x89,0x7D,0x75,0x6F,0x76,0x94,0xC0,0xD2,0xB7,0x84,0x66,0x66,0x6A,0x60,0x55,0x4B,0x3F,0x46,0x61,0x88,0xAB,0xA9
,0x94,0x71,0x63,0x7B,0x9D,0xB1,0x98,0x79,0x7C,0x7B,0x71,0x7C,0x9F,0xC5,0xDA,0xB9,0x7A,0x61,0x5E,0x5F,0x5E,0x4F,0x44,0x40,0x4C,0x6A,0x92,0xAE,0xA7,0x94,0x6F,0x5E,0x7F,0xA2,0xAA,0x90,0x7C,0x80,0x78,0x6D,0x81,0xAC,0xCC,0xD0,0xAA,0x76,0x64,0x59,0x58,0x5D,0x4E,0x43,0x3F,0x4C,0x73,0x9D,0xB0,0xA3,0x8B,0x6F,0x68,0x83,0x9C,0xA3,0x90,0x84,0x88,0x78,0x6A,0x7E,0xAF,0xCF,0xCE,0xA6,0x6F,0x63,0x5C,0x58,0x58,0x4F,0x4A,0x3E,0x46,0x71,0x9E,0xB5,0xA4,0x87,0x6B,0x68,0x88,0xA0,0x9D,0x8B,0x85,0x8A,0x7C,0x6B,0x7C,0xB2
,0xD6,0xCD,0xA0,0x6C,0x61,0x5E,0x58,0x54,0x4E,0x4C,0x45,0x4D,0x6E,0x99,0xB4,0xA6,0x8A,0x6C,0x63,0x84,0x9D,0x9E,0x91,0x89,0x87,0x77,0x66,0x77,0xAF,0xD4,0xD2,0xAA,0x71,0x63,0x63,0x5C,0x57,0x4D,0x46,0x3F,0x48,0x68,0x95,0xB1,0xA8,0x91,0x74,0x69,0x84,0x9B,0x9F,0x92,0x83,0x81,0x78,0x66,0x73,0xA9,0xD1,0xD8,0xB5,0x7B,0x68,0x61,0x5C,0x5C,0x52,0x47,0x3C,0x41,0x61,0x8E,0xB0,0xAB,0x92,0x74,0x69,0x7E,0x97,0xA6,0x98,0x82,0x82,0x7B,0x6B,0x72,0x9C,0xC5,0xD6,0xBB,0x85,0x6C,0x64,0x5F,0x5D,0x54,0x4A,0x3F,0x3F,0x55
//,0x7F,0xA8,0xB0,0x9D,0x80,0x6C,0x73,0x8B,0xA8,0x9D,0x84,0x81,0x7F,0x71,0x70,0x8D,0xB5,0xD5,0xC9,0x9B,0x76,0x64,0x5C,0x5A,0x53,0x4E,0x43,0x3E,0x4E,0x71,0x9A,0xAF,0xAC,0x90,0x76,0x6A,0x75,0x9C,0xA3,0x8E,0x81,0x7B,0x7B,0x76,0x82,0xA1,0xC5,0xCE,0xB7,0x8B,0x65,0x5C,0x53,0x55,0x55,0x4C,0x45,0x4A,0x60,0x7E,0xA4,0xBC,0xAB,0x87,0x69,0x65,0x81,0x9D,0xA7,0x8E,0x78,0x7A,0x7C,0x7F,0x91,0xAC,0xC5,0xCC,0xA9,0x76,0x5E,0x53,0x54,0x51,0x49,0x46,0x48,0x55,0x63,0x89,0xB2,0xBB,0xA7,0x83,0x67,0x67,0x7E,0xA0,0x9C,0x87
,0x85,0x87,0x86,0x82,0x89,0xA3,0xC8,0xC9,0xA6,0x79,0x5A,0x50,0x4E,0x4E,0x50,0x4F,0x4D,0x51,0x65,0x85,0xAB,0xBF,0xAE,0x91,0x6C,0x61,0x7A,0x8F,0x91,0x89,0x8E,0x95,0x8A,0x7F,0x87,0xA7,0xC3,0xCD,0xA6,0x75,0x58,0x45,0x45,0x4C,0x4F,0x50,0x52,0x56,0x66,0x8B,0xAC,0xBB,0xB4,0x91,0x6F,0x5E,0x6E,0x8E,0x92,0x8F,0x93,0x94,0x8B,0x83,0x85,0xA2,0xC5,0xC7,0xAB,0x80,0x5A,0x4A,0x44,0x45,0x4D,0x50,0x50,0x51,0x5F,0x7E,0xA5,0xBB,0xB9,0xA5,0x7E,0x65,0x68,0x7A,0x84,0x84,0x93,0xA3,0x9B,0x84,0x7F,0x90,0xB3,0xCD,0xB7,0x95
,0x70,0x50,0x42,0x3B,0x46,0x53,0x53,0x50,0x59,0x6F,0x8E,0xAF,0xBE,0xB5,0x99,0x75,0x67,0x6D,0x79,0x82,0x8C,0x9D,0xA1,0x8E,0x7A,0x86,0xA4,0xC4,0xCC,0xA9,0x86,0x64,0x4C,0x45,0x43,0x47,0x4C,0x50,0x50,0x5B,0x7B,0x9E,0xB9,0xBC,0xA9,0x8B,0x71,0x6E,0x70,0x75,0x86,0x99,0xA0,0x94,0x7E,0x73,0x92,0xBC,0xCC,0xBC,0x9D,0x80,0x65,0x51,0x45,0x44,0x4F,0x4D,0x47,0x47,0x56,0x79,0x9A,0xB4,0xB6,0xA3,0x8C,0x7E,0x7B,0x74,0x78,0x8C,0x9D,0x93,0x79,0x67,0x72,0x9B,0xBB,0xC5,0xBF,0xA9,0x92,0x80,0x6F,0x64,0x5E,0x56,0x46,0x36
,0x2C,0x3B,0x65,0x8E,0xAB,0xB1,0xA5,0x95,0x8A,0x83,0x77,0x76,0x8A,0x9F,0x8F,0x74,0x66,0x73,0x9D,0xB8,0xBC,0xB9,0xAB,0x9A,0x85,0x72,0x69,0x65,0x5C,0x4A,0x37,0x27,0x34,0x58,0x82,0xA6,0xB5,0xB2,0xA3,0x96,0x82,0x6D,0x6D,0x88,0x9A,0x8E,0x77,0x68,0x75,0x9F,0xB6,0xB7,0xB5,0xAE,0xA0,0x86,0x74,0x6F,0x6E,0x68,0x54,0x39,0x23,0x2A,0x45,0x6E,0x95,0xAB,0xAF,0xA6,0xA0,0x8D,0x75,0x74,0x8B,0x99,0x8F,0x77,0x65,0x6E,0x88,0x9E,0xAF,0xB5,0xB2,0xAC,0x9A,0x89,0x7F,0x7E,0x78,0x63,0x44,0x28,0x20,0x2F,0x56,0x7E,0xA0,0xAD
#ifndef FCC_TEST_MODES
,0xA6,0xA0,0x93,0x81,0x79,0x83,0x8F,0x97,0x87,0x68,0x66,0x7C,0x9A,0xAE,0xB2,0xB0,0xAC,0x9F,0x8F,0x82,0x7D,0x77,0x68,0x4D,0x31,0x20,0x28,0x48,0x6F,0x9B,0xAE,0xAB,0xA5,0x9A,0x8B,0x79,0x7A,0x8B,0x9B,0x8A,0x71,0x67,0x70,0x8F,0xA4,0xAD,0xB2,0xAF,0xA9,0x9A,0x8B,0x7F,0x7E,0x79,0x62,0x44,0x24,0x1D,0x30,0x52,0x7C,0x99,0xA7,0xA9,0xA7,0x96,0x7C,0x75,0x89,0x9E,0x95,0x7E,0x67,0x66,0x80,0x92,0xA1,0xAF,0xAF,0xAF,0xA8,0x97,0x87,0x82,0x7E,0x72,0x5B,0x39,0x24,0x22,0x36,0x5B,0x82,0x9F,0xA9,0xAD,0xA3,0x89,0x75,0x81
,0x9A,0x9D,0x8D,0x70,0x66,0x74,0x84,0x90,0x99,0xAC,0xB6,0xB1,0xA2,0x94,0x8B,0x88,0x82,0x6E,0x52,0x33,0x1F,0x23,0x38,0x5E,0x86,0xA0,0xAE,0xAC,0x9C,0x83,0x7A,0x89,0xA2,0xA0,0x7F,0x67,0x65,0x75,0x88,0x8F,0x9A,0xAC,0xB4,0xB4,0xA3,0x95,0x8E,0x8C,0x82,0x6D,0x4B,0x2F,0x1B,0x20,0x40,0x68,0x8B,0xA0,0xAB,0xAA,0x99,0x82,0x7E,0x96,0xA0,0x98,0x7F,0x65,0x66,0x72,0x81,0x8F,0x9A,0xA5,0xAF,0xAE,0xA2,0x9B,0x96,0x99,0x91,0x79,0x5A,0x32,0x1E,0x22,0x38,0x5D,0x7A,0x8C,0x9A,0x9C,0x8E,0x80,0x84,0x9D,0xB0,0xA0,0x84,0x6F
,0x65,0x72,0x7A,0x80,0x8D,0x99,0xA5,0xAC,0xA6,0x9F,0xA3,0xA8,0xA4,0x8E,0x65,0x3F,0x27,0x26,0x37,0x51,0x6A,0x7A,0x88,0x8B,0x81,0x72,0x80,0xA3,0xB9,0xB2,0x93,0x7A,0x74,0x77,0x76,0x70,0x75,0x81,0x92,0x9A,0x9B,0x9D,0xAA,0xBE,0xC5,0xB8,0x92,0x64,0x3F,0x2A,0x31,0x40,0x53,0x5E,0x67,0x71,0x73,0x70,0x77,0x97,0xB5,0xBE,0xAE,0x8E,0x7B,0x74,0x71,0x6D,0x6F,0x77,0x84,0x92,0x99,0x9F,0xA5,0xB2,0xBE,0xC7,0xBC,0x82,0x49,0x2E,0x2F,0x3D,0x45,0x51,0x61,0x71,0x77,0x75,0x72,0x81,0xA1,0xB4,0xB7,0xA7,0x8F,0x7D,0x73,0x6F
//,0x6C,0x6D,0x73,0x85,0x97,0x9A,0x99,0x9B,0xA8,0xBC,0xCF,0xC1,0x97,0x6C,0x4C,0x3E,0x35,0x36,0x46,0x5C,0x6A,0x6A,0x64,0x63,0x74,0x8F,0xA7,0xB3,0xB0,0xA6,0x90,0x7E,0x77,0x6C,0x68,0x6B,0x7A,0x90,0x99,0x90,0x92,0xAA,0xC6,0xD4,0xC1,0xA0,0x78,0x54,0x3B,0x2B,0x2F,0x43,0x61,0x6E,0x6D,0x66,0x66,0x77,0x8E,0xA8,0xB3,0xAE,0x9F,0x8E,0x82,0x73,0x6B,0x67,0x6A,0x7B,0x92,0x98,0x92,0x93,0xA4,0xC3,0xD1,0xC0,0xA4,0x7F,0x5E,0x40,0x2B,0x29,0x3D,0x59,0x6E,0x75,0x6A,0x69,0x6D,0x83,0xA0,0xAD,0xAE,0xA0,0x92,0x89,0x7C,0x70
,0x68,0x67,0x77,0x8C,0x97,0x91,0x8B,0x9C,0xB7,0xC6,0xC7,0xB6,0x9B,0x7B,0x57,0x37,0x27,0x2D,0x44,0x62,0x6F,0x72,0x6B,0x65,0x76,0x8B,0xA6,0xB2,0xA9,0x9C,0x90,0x86,0x78,0x6E,0x63,0x69,0x7A,0x90,0x96,0x8C,0x8C,0x9C,0xB8,0xCB,0xC4,0xB3,0x9B,0x7E,0x59,0x39,0x29,0x31,0x4B,0x64,0x71,0x68,0x5F,0x5E,0x6F,0x8C,0xA3,0xB1,0xAB,0x9F,0x94,0x87,0x7B,0x72,0x66,0x6B,0x7B,0x8E,0x95,0x8A,0x8C,0xA1,0xB5,0xC1,0xBE,0xB5,0xA3,0x87,0x62,0x3E,0x2B,0x33,0x4C,0x61,0x6F,0x68,0x58,0x58,0x67,0x84,0x9D,0xAB,0xAD,0xA5,0x9E,0x90
,0x82,0x73,0x68,0x6C,0x74,0x81,0x8B,0x89,0x87,0x99,0xB1,0xBE,0xC5,0xBD,0xAD,0x94,0x6F,0x47,0x2F,0x2A,0x43,0x60,0x6C,0x69,0x5B,0x57,0x65,0x7D,0x98,0xA7,0xAC,0xA6,0xA0,0x93,0x84,0x72,0x67,0x6B,0x77,0x82,0x81,0x82,0x8D,0x9A,0xAA,0xB3,0xB9,0xBD,0xB8,0xA3,0x81,0x55,0x33,0x28,0x38,0x59,0x6A,0x6F,0x62,0x53,0x5C,0x70,0x87,0x9A,0xA3,0xA7,0xA8,0xA1,0x8E,0x7D,0x6B,0x6B,0x77,0x7F,0x7F,0x76,0x7D,0x92,0xA3,0xAC,0xAF,0xB8,0xC2,0xBF,0xA4,0x77,0x46,0x31,0x34,0x48,0x5C,0x63,0x64,0x59,0x58,0x62,0x73,0x8A,0x9C,0xA7
,0xAB,0xAA,0x9D,0x8A,0x76,0x68,0x6D,0x78,0x7F,0x79,0x75,0x84,0x9A,0xA9,0xAB,0xAE,0xB9,0xC3,0xBC,0xA0,0x6F,0x43,0x2F,0x31,0x4B,0x5F,0x68,0x64,0x5D,0x5B,0x62,0x76,0x8B,0x97,0xA0,0xAB,0xA9,0x99,0x85,0x77,0x6F,0x74,0x7E,0x80,0x7A,0x76,0x83,0x96,0xA0,0xA5,0xAE,0xBB,0xC4,0xC1,0xA2,0x72,0x4A,0x34,0x3B,0x4D,0x5E,0x65,0x5A,0x54,0x56,0x63,0x70,0x87,0x9B,0xA8,0xAC,0xA6,0x97,0x86,0x7B,0x6E,0x73,0x7A,0x7E,0x7D,0x77,0x82,0x97,0xA2,0xA6,0xAD,0xB8,0xC5,0xC2,0xA5,0x7A,0x4D,0x37,0x3B,0x4B,0x5E,0x63,0x61,0x58,0x52
,0x5C,0x6C,0x7D,0x8F,0xA2,0xAB,0xAA,0x9E,0x8B,0x7D,0x71,0x72,0x7B,0x7F,0x7B,0x75,0x7B,0x89,0x9B,0xA3,0xA8,0xB6,0xC4,0xC6,0xB4,0x8F,0x65,0x43,0x34,0x42,0x51,0x62,0x63,0x59,0x52,0x54,0x65,0x79,0x8E,0x9D,0xA6,0xA8,0xA1,0x91,0x83,0x79,0x70,0x77,0x7F,0x85,0x7F,0x78,0x80,0x90,0x9D,0xA6,0xAE,0xBA,0xC3,0xBE,0xAB,0x86,0x58,0x3F,0x39,0x47,0x5C,0x63,0x5C,0x4D,0x4D,0x59,0x69,0x7A,0x8B,0x9D,0xA8,0xAB,0xA2,0x8F,0x80,0x78,0x74,0x7C,0x83,0x7F,0x78,0x78,0x80,0x8E,0x9D,0xA4,0xAF,0xB9,0xC1,0xC1,0xAA,0x82,0x5B,0x42
,0x39,0x44,0x5B,0x62,0x5D,0x52,0x53,0x5D,0x67,0x73,0x85,0x99,0xA9,0xB0,0xA4,0x8F,0x7E,0x75,0x79,0x80,0x7F,0x7A,0x7B,0x7F,0x85,0x90,0x9B,0xA3,0xAC,0xB7,0xBE,0xBD,0xAB,0x8C,0x63,0x43,0x36,0x3C,0x4F,0x57,0x57,0x59,0x61,0x68,0x68,0x70,0x81,0x94,0xA4,0xAB,0xA1,0x92,0x83,0x79,0x76,0x7B,0x7E,0x80,0x80,0x81,0x88,0x90,0x96,0x98,0x9E,0xA9,0xB3,0xBC,0xB9,0xA8,0x87,0x62,0x43,0x36,0x3D,0x46,0x4D,0x57,0x63,0x6A,0x66,0x66,0x70,0x85,0x9A,0xA9,0xA8,0x9C,0x8D,0x81,0x7A,0x7A,0x7D,0x7E,0x81,0x82,0x88,0x8F,0x92,0x95
#endif
,0x98,0xA2,0xAD,0xB7,0xBB,0xB1,0x9B,0x7A,0x59,0x43,0x40,0x44,0x4C,0x54,0x5C,0x61,0x5D,0x58,0x5B,0x69,0x81,0x98,0xA2,0xA0,0x9A,0x92,0x8D,0x88,0x85,0x81,0x7F,0x84,0x83,0x7F,0x7C,0x7B,0x7E,0x89,0x9A,0xA9,0xB6,0xBE,0xBD,0xB4,0xA3,0x85,0x69,0x58,0x57,0x5A,0x5E,0x60,0x55,0x49,0x40,0x41,0x50,0x6D,0x8C,0x98,0x97,0x97,0x9A,0x99,0x8F,0x83,0x81,0x83,0x89,0x8B,0x83,0x7D,0x7A,0x7E,0x89,0x97,0xA1,0xAA,0xB1,0xB9,0xBA,0xAC,0x91,0x73,0x5E,0x56,0x59,0x60,0x5E,0x55,0x4A,0x43,0x44,0x4D,0x62,0x7D,0x93,0x99,0x98,0x9B
,0x98,0x91,0x8A,0x85,0x83,0x88,0x89,0x85,0x7F,0x78,0x7C,0x86,0x92,0x9C,0xA6,0xAE,0xB5,0xB6,0xAF,0x9B,0x81,0x6B,0x5F,0x5E,0x5E,0x60,0x5A,0x50,0x47,0x44,0x4B,0x59,0x6F,0x85,0x92,0x94,0x95,0x96,0x94,0x8B,0x87,0x86,0x87,0x8A,0x88,0x84,0x81,0x81,0x86,0x8D,0x97,0x9B,0x9D,0xA3,0xA8,0xA9,0xA5,0x97,0x84,0x75,0x6C,0x68,0x66,0x61,0x5C,0x56,0x50,0x4A,0x4B,0x51,0x60,0x72,0x82,0x8C,0x91,0x93,0x95,0x93,0x91,0x8C,0x87,0x86,0x87,0x85,0x84,0x81,0x83,0x88,0x91,0x99,0x9D,0x9F,0xA0,0xA1,0x9E,0x99,0x8F,0x80,0x75,0x6A
#endif

,0x62,0x5D,0x5B,0x59,0x59,0x5A,0x5B,0x5D,0x62,0x6B,0x79,0x85,0x8B,0x8C,0x8D,0x90,0x91,0x8F,0x8B,0x87,0x84,0x86,0x86,0x87,0x87,0x86,0x89,0x8D,0x93,0x95,0x95,0x97,0x97,0x95,0x93,0x8C,0x83,0x78,0x6E,0x66,0x62,0x62,0x62,0x63,0x63,0x63,0x64,0x67,0x6E,0x78,0x83,0x89,0x8C,0x8D,0x8D,0x8C,0x8B,0x8A,0x88,0x87,0x89,0x89,0x8B,0x8A,0x89,0x8A,0x8A,0x8C,0x8D,0x8D,0x8D,0x8C,0x8A,0x88,0x85,0x7F,0x78,0x70,0x6A,0x66,0x64,0x67,0x68,0x6A,0x6D,0x6F,0x73,0x78,0x7D,0x83,0x88,0x8A,0x8B,0x8B,0x8B,0x8C,0x8B,0x89,0x87,0x87
,/*0x88,0x89,0x89,0x88,0x87,0x88,0x88,0x88,0x88,0x86,0x85,0x83,0x82,0x7F,0x7C,0x77,0x72,0x6E,0x6C,0x6C,0x6E,0x6F,0x72,0x75,0x77,0x7B,0x7E,0x81,0x85,0x86,0x88,0x89,0x89,0x88,0x88,0x87,0x86,0x87,0x87,0x88,0x88,0x87,0x87,0x87,0x87,0x86,0x86,0x84,0x83,0x81,0x80,0x7E,0x7C,0x79,0x77,0x76,0x73,0x73,0x73,0x75,0x77,0x78,0x7A,0x7C,0x7E,0x80,0x82,0x83,0x85,0x85,0x87,0x87,0x87,0x86,0x87,0x86,0x86,0x86,0x85,0x86,0x86,0x84,0x84,0x84,0x83,0x82,0x81,0x81,0x81,0x80,0x7E,0x7E,0x7C,0x7B,0x7A,0x78,0x78,0x77,0x79,0x7A
,0x7A,0x7B,0x7D,0x7E,0x7F,0x7F,0x82,0x83,0x83,0x84,0x84,0x85,0x84,0x84,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x82,0x82,0x82,0x81,0x81,0x80,0x7E,0x7E,0x7E,0x7D,0x7C,0x7B,0x7C,0x7B,0x7C,0x7D,0x7D,0x7E,0x7E,0x7E,0x7F,0x7F*/};
/* end binary data. size = 3244 bytes */



const uint8_t irritated[] PROGMEM = 
{/*0x80,0x80,0x80,0x80,0x7F,0x80,0x81,0x80,0x80,0x7F,0x81,0x7F,0x80,0x80,0x80,0x7F,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x81,0x80,0x80,0x80,0x80,0x80,0x81,0x80,0x7F,0x7F,0x80,0x81,0x7F,0x81,0x80,0x7F,0x80,0x80,0x80,0x80,0x7F,0x81,0x81,0x80,0x7F,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x81,0x80,0x80,0x80,0x80,0x7F,0x80,0x81,0x80,0x80,0x81,0x80,0x80,0x80,0x80,0x7F,0x80,0x80,0x80,0x80,0x81,0x80,0x81,0x80,0x80
,*/0x80,0x7F,0x80,0x80,0x7F,0x7F,0x80,0x7E,0x80,0x80,0x80,0x7F,0x7F,0x80,0x80,0x80,0x7F,0x7F,0x80,0x80,0x7F,0x7E,0x80,0x80,0x80,0x7F,0x80,0x7F,0x80,0x80,0x80,0x7F,0x80,0x80,0x80,0x7F,0x80,0x80,0x80,0x7F,0x7F,0x80,0x80,0x7F,0x80,0x80,0x80,0x80,0x81,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x80,0x80,0x80,0x7F,0x80,0x7F,0x80,0x7F,0x80,0x80,0x7F,0x80,0x7F,0x80,0x7F,0x7F,0x7F,0x80,0x81,0x80,0x80,0x80,0x80,0x80,0x80,0x7F,0x7F,0x7F,0x80,0x7F,0x7F,0x7F,0x80,0x7F,0x7F,0x7F,0x7F,0x80,0x7F,0x80,0x7F,0x7F,0x80,0x7E
,0x80,0x80,0x7F,0x80,0x80,0x7F,0x7F,0x7F,0x7F,0x80,0x7F,0x7F,0x7F,0x7E,0x7F,0x7E,0x7F,0x7E,0x80,0x80,0x80,0x80,0x80,0x80,0x7F,0x7E,0x7F,0x7F,0x80,0x7E,0x7F,0x7E,0x7F,0x7F,0x7F,0x7F,0x80,0x80,0x80,0x7F,0x80,0x7F,0x7F,0x7F,0x80,0x7F,0x81,0x7F,0x7F,0x80,0x80,0x7F,0x81,0x7F,0x7F,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x81,0x81,0x80,0x7F,0x80,0x81,0x80,0x80,0x81,0x81,0x81,0x82,0x80,0x81,0x81,0x81,0x80,0x81,0x82,0x82,0x81,0x81,0x82,0x82,0x81,0x82,0x81,0x82,0x81,0x82,0x80,0x83,0x81,0x82,0x81,0x83,0x82,0x84
#ifndef SOUND_MINIMUM
,0x81,0x82,0x81,0x83,0x82,0x83,0x82,0x83,0x81,0x84,0x82,0x83,0x82,0x83,0x82,0x83,0x81,0x82,0x82,0x83,0x81,0x83,0x82,0x83,0x82,0x83,0x82,0x84,0x82,0x83,0x81,0x83,0x81,0x82,0x81,0x83,0x81,0x82,0x82,0x83,0x82,0x83,0x81,0x83,0x82,0x83,0x81,0x82,0x82,0x82,0x81,0x82,0x81,0x82,0x82,0x83,0x82,0x83,0x81,0x83,0x81,0x83,0x80,0x82,0x81,0x83,0x82,0x82,0x81,0x82,0x81,0x82,0x81,0x82,0x81,0x82,0x81,0x81,0x82,0x82,0x81,0x81,0x81,0x81,0x81,0x82,0x81,0x80,0x80,0x82,0x80,0x80,0x80,0x82,0x80,0x81,0x80,0x80,0x81,0x82
,0x81,0x81,0x81,0x81,0x80,0x81,0x81,0x81,0x81,0x81,0x81,0x81,0x80,0x80,0x80,0x81,0x81,0x81,0x81,0x81,0x80,0x80,0x80,0x82,0x81,0x82,0x81,0x80,0x80,0x82,0x7F,0x80,0x80,0x81,0x80,0x81,0x80,0x80,0x80,0x80,0x80,0x81,0x80,0x81,0x7F,0x7F,0x7F,0x7F,0x80,0x80,0x80,0x7F,0x80,0x7F,0x7F,0x7E,0x80,0x7F,0x80,0x7F,0x7F,0x7E,0x7F,0x7E,0x80,0x80,0x80,0x80,0x80,0x81,0x7F,0x80,0x80,0x7F,0x7F,0x80,0x80,0x80,0x7F,0x7F,0x80,0x7F,0x80,0x81,0x80,0x81,0x81,0x81,0x80,0x81,0x80,0x80,0x81,0x81,0x80,0x81,0x7F,0x7F,0x81,0x80
,0x80,0x80,0x80,0x80,0x7F,0x7F,0x7F,0x80,0x7F,0x7F,0x7F,0x7D,0x7E,0x7F,0x80,0x7E,0x80,0x80,0x80,0x80,0x7F,0x7E,0x7E,0x7F,0x7E,0x7D,0x7F,0x7E,0x7F,0x7E,0x80,0x7F,0x80,0x80,0x7F,0x7E,0x7F,0x7D,0x7E,0x7C,0x7F,0x7F,0x7E,0x7D,0x7E,0x7D,0x7F,0x7E,0x7F,0x7D,0x7E,0x7D,0x7D,0x7A,0x7E,0x7C,0x7F,0x7F,0x7E,0x7E,0x7F,0x7D,0x7F,0x7D,0x7E,0x7D,0x7E,0x7D,0x7D,0x7B,0x7E,0x7C,0x80,0x7E,0x81,0x80,0x7E,0x7D,0x7E,0x7C,0x80,0x7F,0x7E,0x7E,0x7F,0x7E,0x7F,0x7D,0x81,0x82,0x81,0x82,0x7F,0x7E,0x80,0x7F,0x80,0x7F,0x82,0x83
,0x82,0x81,0x80,0x81,0x83,0x85,0x81,0x83,0x81,0x82,0x81,0x81,0x80,0x82,0x83,0x87,0x82,0x83,0x82,0x83,0x82,0x83,0x80,0x82,0x82,0x85,0x81,0x82,0x82,0x84,0x82,0x85,0x80,0x81,0x82,0x82,0x80,0x80,0x80,0x82,0x82,0x83,0x81,0x82,0x81,0x83,0x81,0x82,0x82,0x83,0x83,0x85,0x81,0x81,0x81,0x80,0x80,0x80,0x80,0x81,0x82,0x84,0x80,0x82,0x82,0x83,0x82,0x85,0x83,0x85,0x84,0x86,0x81,0x82,0x81,0x82,0x82,0x83,0x83,0x83,0x83,0x86,0x82,0x83,0x82,0x86,0x83,0x86,0x82,0x84,0x84,0x89,0x84,0x87,0x84,0x88,0x83,0x87,0x81,0x84
//,0x86,0x8A,0x86,0x89,0x87,0x8B,0x85,0x8A,0x83,0x85,0x87,0x8E,0x85,0x89,0x85,0x89,0x87,0x8B,0x84,0x87,0x88,0x8D,0x85,0x8A,0x85,0x89,0x86,0x8D,0x83,0x85,0x84,0x89,0x84,0x88,0x83,0x85,0x86,0x8A,0x85,0x87,0x84,0x87,0x85,0x87,0x82,0x85,0x87,0x8D,0x84,0x87,0x84,0x86,0x86,0x8C,0x84,0x87,0x86,0x8D,0x85,0x8A,0x83,0x86,0x88,0x8F,0x86,0x8C,0x86,0x8C,0x85,0x8B,0x85,0x89,0x88,0x8F,0x86,0x8A,0x85,0x89,0x85,0x89,0x82,0x84,0x83,0x86,0x83,0x86,0x82,0x83,0x81,0x83,0x7E,0x7D,0x7E,0x7C,0x7D,0x79,0x79,0x74,0x7D,0x7A
,0x7B,0x77,0x77,0x70,0x79,0x74,0x77,0x70,0x77,0x70,0x77,0x6F,0x74,0x6A,0x78,0x71,0x77,0x6F,0x78,0x72,0x78,0x73,0x77,0x6F,0x7A,0x76,0x79,0x74,0x7B,0x75,0x7A,0x76,0x79,0x73,0x7B,0x77,0x7A,0x75,0x7A,0x76,0x7F,0x7C,0x7C,0x79,0x7C,0x79,0x7D,0x7A,0x7B,0x76,0x7B,0x76,0x7B,0x78,0x79,0x74,0x7A,0x74,0x79,0x73,0x7C,0x78,0x79,0x74,0x77,0x6F,0x7A,0x73,0x78,0x72,0x77,0x71,0x77,0x6E,0x75,0x6C,0x76,0x6D,0x75,0x6C,0x75,0x6D,0x76,0x6D,0x75,0x6C,0x77,0x6F,0x78,0x70,0x77,0x70,0x79,0x74,0x7A,0x76,0x7C,0x78,0x7E,0x7C
,0x7C,0x79,0x7C,0x78,0x7D,0x7D,0x7F,0x7E,0x81,0x83,0x83,0x84,0x85,0x89,0x86,0x8B,0x86,0x88,0x87,0x8D,0x86,0x8D,0x87,0x8D,0x88,0x8D,0x85,0x8A,0x87,0x8E,0x87,0x8E,0x89,0x8F,0x89,0x91,0x87,0x8E,0x89,0x92,0x8A,0x92,0x8A,0x92,0x8A,0x92,0x87,0x8C,0x85,0x8A,0x86,0x8A,0x84,0x86,0x81,0x83,0x80,0x81,0x81,0x80,0x84,0x87,0x86,0x89,0x85,0x8A,0x86,0x8A,0x85,0x8A,0x86,0x8A,0x82,0x82,0x7F,0x7E,0x84,0x87,0x87,0x8B,0x8D,0x98,0x91,0x9F,0x90,0x9D,0x91,0x9E,0x8D,0x98,0x8B,0x94,0x8B,0x93,0x88,0x8E,0x87,0x8F,0x85,0x88
,0x82,0x85,0x84,0x85,0x7F,0x7E,0x7C,0x78,0x7B,0x75,0x75,0x6D,0x71,0x64,0x72,0x65,0x71,0x66,0x70,0x62,0x6C,0x5B,0x6F,0x63,0x72,0x65,0x6F,0x60,0x70,0x62,0x6E,0x5F,0x71,0x64,0x78,0x71,0x7A,0x76,0x7A,0x74,0x7B,0x77,0x7C,0x78,0x7E,0x7C,0x7F,0x7E,0x83,0x85,0x89,0x91,0x88,0x8D,0x8A,0x93,0x8C,0x97,0x88,0x8F,0x8D,0x98,0x8A,0x93,0x87,0x8D,0x87,0x8E,0x86,0x8B,0x86,0x8B,0x7F,0x7E,0x82,0x85,0x87,0x8C,0x84,0x86,0x84,0x85,0x7E,0x7C,0x78,0x71,0x79,0x72,0x77,0x6E,0x76,0x6F,0x79,0x73,0x79,0x73,0x7B,0x77,0x78,0x70
,0x79,0x74,0x80,0x7E,0x7D,0x7A,0x7E,0x7C,0x7E,0x7C,0x7C,0x79,0x80,0x80,0x7D,0x79,0x7B,0x77,0x7D,0x7C,0x80,0x80,0x84,0x87,0x7E,0x7C,0x81,0x81,0x82,0x84,0x7D,0x7B,0x7E,0x7B,0x7A,0x74,0x7A,0x76,0x7D,0x7A,0x79,0x74,0x78,0x73,0x7A,0x74,0x7C,0x79,0x7E,0x7C,0x7D,0x7C,0x7F,0x7D,0x7F,0x7E,0x7D,0x7C,0x7C,0x79,0x7A,0x77,0x79,0x73,0x7F,0x7D,0x86,0x8B,0x89,0x8F,0x87,0x8E,0x88,0x8F,0x8C,0x96,0x8C,0x96,0x87,0x8E,0x82,0x86,0x84,0x88,0x89,0x90,0x88,0x8F,0x83,0x86,0x8B,0x92,0x92,0xA2,0x8F,0x9B,0x8A,0x94,0x87,0x8C
,0x82,0x83,0x80,0x80,0x7F,0x7E,0x85,0x89,0x87,0x8C,0x87,0x8E,0x89,0x90,0x84,0x8A,0x85,0x88,0x86,0x8A,0x86,0x89,0x88,0x8F,0x88,0x8D,0x89,0x8F,0x8C,0x95,0x8F,0x9B,0x8E,0x9A,0x89,0x91,0x8E,0x9A,0x95,0xA6,0x93,0xA3,0x90,0x9E,0x92,0xA1,0x93,0xA4,0x91,0x9F,0x8F,0x9B,0x8D,0x97,0x88,0x91,0x85,0x8B,0x84,0x88,0x85,0x8A,0x87,0x8B,0x84,0x89,0x81,0x81,0x7B,0x76,0x79,0x73,0x78,0x72,0x78,0x72,0x73,0x67,0x6E,0x5F,0x71,0x66,0x78,0x72,0x78,0x72,0x73,0x66,0x71,0x66,0x73,0x68,0x70,0x63,0x68,0x54,0x6B,0x59,0x74,0x6B
,0x75,0x6B,0x6D,0x5D,0x6B,0x5A,0x6B,0x5B,0x69,0x55,0x64,0x4E,0x64,0x4E,0x6C,0x5C,0x73,0x69,0x72,0x66,0x69,0x56,0x68,0x55,0x6A,0x5A,0x69,0x57,0x63,0x4B,0x60,0x46,0x6A,0x58,0x74,0x6A,0x73,0x69,0x71,0x64,0x76,0x6E,0x80,0x80,0x7D,0x7B,0x71,0x64,0x6F,0x62,0x7B,0x77,0x85,0x89,0x85,0x89,0x8A,0x92,0x97,0xAA,0x9B,0xB1,0x98,0xAE,0x91,0xA0,0x83,0x86,0x80,0x82,0x89,0x93,0x90,0x9D,0x8D,0x9A,0x8B,0x95,0x90,0x9E,0x93,0xA3,0x88,0x90,0x80,0x7F,0x87,0x8D,0x94,0xA5,0x8C,0x95,0x7D,0x7C,0x86,0x8C,0x96,0xA8,0x95,0xA5
,0x86,0x8B,0x89,0x90,0x9A,0xB1,0xA1,0xBD,0x95,0xA6,0x8E,0x98,0x99,0xAD,0x9E,0xB7,0x96,0xA9,0x94,0xA3,0x8C,0x98,0x8D,0x97,0x8D,0x97,0x84,0x86,0x81,0x83,0x83,0x85,0x84,0x87,0x79,0x72,0x6C,0x5C,0x74,0x6A,0x7B,0x76,0x78,0x71,0x6F,0x60,0x70,0x61,0x7F,0x7F,0x7C,0x7A,0x6E,0x5E,0x6D,0x5D,0x76,0x6D,0x7F,0x7D,0x77,0x70,0x71,0x62,0x79,0x74,0x7E,0x7C,0x7F,0x7E,0x7F,0x7E,0x7C,0x78,0x81,0x80,0x7F,0x7F,0x7B,0x77,0x7A,0x73,0x79,0x71,0x7B,0x78,0x75,0x6C,0x6C,0x5C,0x6B,0x59,0x71,0x66,0x7B,0x76,0x73,0x66,0x66,0x4F
,0x70,0x63,0x78,0x72,0x6C,0x5B,0x5D,0x41,0x5F,0x43,0x6E,0x60,0x70,0x64,0x69,0x57,0x72,0x67,0x83,0x85,0x8C,0x96,0x82,0x83,0x77,0x6F,0x85,0x88,0x87,0x8D,0x77,0x6F,0x75,0x6B,0x85,0x89,0x94,0xA4,0x99,0xAD,0x9F,0xB9,0xA1,0xBD,0x97,0xA9,0x8A,0x94,0x88,0x91,0x8B,0x95,0x8D,0x98,0x8F,0x9D,0x98,0xAD,0xA8,0xCA,0xA5,0xC5,0x9E,0xB9,0x9D,0xB6,0x9E,0xB7,0x9B,0xB1,0x8A,0x94,0x8E,0x9A,0x9D,0xB7,0x99,0xAE,0x86,0x8C,0x8C,0x97,0x99,0xAE,0x8B,0x95,0x7A,0x74,0x74,0x6C,0x73,0x69,0x78,0x72,0x7E,0x7D,0x77,0x71,0x77,0x73
//,0x78,0x73,0x76,0x70,0x72,0x67,0x6C,0x5D,0x6C,0x5B,0x68,0x56,0x62,0x4A,0x5F,0x46,0x5F,0x47,0x66,0x53,0x6E,0x5F,0x66,0x53,0x6C,0x5E,0x75,0x6E,0x6C,0x5C,0x62,0x4B,0x66,0x51,0x6B,0x5A,0x66,0x53,0x63,0x4C,0x69,0x59,0x66,0x53,0x6A,0x59,0x79,0x74,0x75,0x6C,0x72,0x66,0x70,0x66,0x72,0x68,0x72,0x67,0x6C,0x5C,0x74,0x6B,0x81,0x82,0x80,0x81,0x7C,0x79,0x81,0x83,0x92,0xA2,0x96,0xA9,0x81,0x83,0x84,0x88,0x9F,0xB9,0xA5,0xC4,0x89,0x93,0x79,0x75,0x8C,0x97,0x98,0xAE,0x91,0x9F,0x8E,0x98,0x8B,0x95,0x8D,0x98,0x8D,0x97
,0x82,0x83,0x7D,0x7B,0x81,0x82,0x89,0x8F,0x8B,0x95,0x8A,0x91,0x8D,0x98,0x91,0x9F,0x92,0xA1,0x8B,0x93,0x83,0x83,0x8A,0x90,0x96,0xA9,0x96,0xA5,0x8A,0x91,0x8E,0x98,0x9C,0xB0,0x9A,0xAF,0x8E,0x96,0x85,0x88,0x89,0x8F,0x89,0x8C,0x81,0x81,0x7B,0x73,0x7C,0x76,0x7F,0x7C,0x7D,0x76,0x7A,0x73,0x7F,0x7C,0x82,0x82,0x74,0x68,0x64,0x4C,0x69,0x54,0x77,0x6D,0x7F,0x7C,0x76,0x6F,0x75,0x6A,0x7A,0x76,0x7F,0x7F,0x7B,0x77,0x71,0x64,0x72,0x67,0x7D,0x7C,0x7F,0x80,0x7A,0x76,0x7E,0x7D,0x82,0x84,0x88,0x8D,0x85,0x8A,0x7F,0x7E
,0x80,0x80,0x7B,0x75,0x75,0x69,0x6B,0x5A,0x6D,0x5A,0x82,0x84,0x8D,0x98,0x87,0x8C,0x82,0x84,0x85,0x86,0x7F,0x7F,0x6D,0x5C,0x67,0x52,0x75,0x6F,0x88,0x8F,0x8F,0x9F,0x87,0x8E,0x86,0x8C,0x99,0xAE,0x9F,0xBA,0x8F,0x9D,0x82,0x83,0x7F,0x80,0x87,0x8D,0x86,0x8A,0x82,0x83,0x8F,0x9A,0x9C,0xB3,0x9F,0xB7,0x94,0xA4,0x8B,0x91,0x95,0xA2,0x9F,0xB6,0x93,0x9F,0x85,0x86,0x93,0xA0,0xA7,0xC4,0x9B,0xAD,0x88,0x8B,0x8A,0x90,0x94,0xA2,0x9A,0xAE,0x95,0xA2,0x82,0x7F,0x7C,0x75,0x82,0x80,0x7A,0x71,0x6D,0x5C,0x70,0x5F,0x7C,0x75
,0x77,0x6E,0x65,0x4B,0x5C,0x3B,0x5F,0x42,0x63,0x47,0x57,0x34,0x4C,0x20,0x58,0x36,0x72,0x63,0x6C,0x5D,0x5B,0x3A,0x5B,0x3A,0x66,0x50,0x64,0x4B,0x57,0x33,0x60,0x43,0x72,0x63,0x79,0x72,0x79,0x73,0x77,0x6D,0x7C,0x75,0x7E,0x77,0x6B,0x57,0x5F,0x43,0x6C,0x59,0x88,0x8F,0xA1,0xBD,0xA6,0xC6,0xA1,0xB9,0x94,0xA2,0x8E,0x97,0x92,0x9E,0x8F,0x9A,0x90,0x9D,0xA1,0xBE,0xA7,0xC7,0xA7,0xC4,0xAB,0xCD,0xB2,0xDA,0xAC,0xD1,0x9A,0xB0,0x8D,0x9B,0x87,0x90,0x8A,0x94,0x8A,0x96,0x7F,0x83,0x7F,0x85,0x90,0xA5,0x92,0xA5,0x7D,0x83
,0x6B,0x60,0x6C,0x65,0x77,0x75,0x76,0x74,0x79,0x7C,0x85,0x8E,0x8F,0x9D,0x89,0x92,0x75,0x6F,0x6B,0x5F,0x79,0x76,0x7B,0x78,0x71,0x69,0x7F,0x81,0x92,0xA0,0x8E,0x95,0x75,0x6D,0x71,0x67,0x7B,0x76,0x7A,0x73,0x6F,0x60,0x6C,0x5E,0x73,0x68,0x7D,0x79,0x7B,0x75,0x71,0x65,0x6D,0x60,0x6F,0x60,0x6E,0x61,0x70,0x63,0x79,0x75,0x79,0x76,0x6E,0x61,0x6C,0x5D,0x72,0x6A,0x6A,0x5B,0x67,0x57,0x69,0x5A,0x5F,0x49,0x64,0x51,0x73,0x6B,0x89,0x90,0x91,0xA0,0x8A,0x94,0x83,0x82,0x7E,0x7A,0x82,0x83,0x81,0x82,0x75,0x6C,0x82,0x82
,0x98,0xA8,0x97,0xA9,0x93,0xA0,0x94,0xA0,0xA0,0xB7,0x99,0xAA,0x83,0x86,0x77,0x71,0x6F,0x63,0x75,0x6C,0x7B,0x75,0x7E,0x7E,0x90,0x9C,0x93,0xA3,0x8C,0x97,0x80,0x7E,0x78,0x6F,0x7D,0x78,0x7D,0x78,0x86,0x88,0x95,0x9F,0x9B,0xA7,0x9E,0xAC,0x9D,0xA9,0x90,0x95,0x90,0x8E,0x93,0x94,0x94,0x96,0x8C,0x85,0x85,0x7D,0x9C,0xA3,0xA8,0xBB,0xA4,0xB5,0x96,0x98,0x7E,0x73,0x76,0x5E,0x70,0x54,0x68,0x4A,0x78,0x65,0x8A,0x88,0x8B,0x8B,0x82,0x7B,0x75,0x67,0x7D,0x72,0x79,0x6E,0x65,0x4C,0x65,0x49,0x75,0x69,0x8F,0x94,0x97,0xA3
,0x85,0x86,0x80,0x79,0x79,0x6E,0x75,0x66,0x78,0x6D,0x73,0x64,0x81,0x79,0x7F,0x76,0x72,0x5E,0x80,0x78,0x83,0x81,0x82,0x7F,0x7F,0x79,0x75,0x68,0x80,0x7E,0x87,0x90,0x88,0x91,0x89,0x94,0x7B,0x7F,0x85,0x8C,0x8A,0x9A,0x88,0x9A,0x96,0xB2,0x89,0xA2,0x89,0xA5,0x9A,0xC0,0x96,0xBD,0x9C,0xC4,0x92,0xB2,0x87,0x9D,0x89,0x9B,0x79,0x81,0x85,0x97,0x95,0xB5,0x97,0xB6,0x98,0xB3,0x89,0x9C,0x8B,0x9E,0x8E,0xA2,0x79,0x7B,0x78,0x76,0x7C,0x81,0x83,0x8D,0x89,0x95,0x76,0x78,0x70,0x6D,0x70,0x6E,0x6B,0x66,0x6C,0x68,0x63,0x57
,0x5B,0x47,0x5D,0x4E,0x58,0x47,0x5D,0x49,0x57,0x44,0x54,0x3F,0x55,0x3C,0x4D,0x2E,0x54,0x3E,0x57,0x46,0x5A,0x4B,0x6A,0x64,0x6A,0x65,0x62,0x54,0x64,0x53,0x61,0x4B,0x69,0x57,0x75,0x6C,0x79,0x73,0x81,0x80,0x7B,0x74,0x7F,0x7D,0x88,0x88,0x7F,0x78,0x86,0x7E,0x89,0x84,0x95,0x96,0x9F,0xA7,0x95,0x9C,0x9A,0xA1,0x9E,0xA7,0x9E,0xA9,0x9E,0xA9,0x94,0x96,0xA8,0xB9,0xAF,0xCD,0x9A,0xA4,0x9F,0xA8,0xA4,0xB3,0xA6,0xB4,0xA1,0xAA,0x94,0x90,0x95,0x8F,0x8E,0x88,0x85,0x7E,0x82,0x79,0x74,0x61,0x7A,0x69,0x81,0x7C,0x87,0x85
,0x92,0x96,0x8B,0x86,0x83,0x79,0x84,0x7E,0x7D,0x76,0x76,0x6C,0x6C,0x60,0x6C,0x66,0x85,0x8E,0x8F,0x95,0xA2,0xAB,0xAA,0xB9,0x8C,0x86,0x75,0x5E,0x67,0x49,0x6A,0x53,0x7C,0x75,0x79,0x73,0x7E,0x73,0x7B,0x6D,0x80,0x78,0x85,0x86,0x77,0x71,0x71,0x6C,0x6C,0x63,0x5E,0x51,0x5D,0x57,0x63,0x5F,0x65,0x61,0x64,0x63,0x60,0x60,0x6F,0x75,0x74,0x7D,0x6E,0x79,0x6F,0x7D,0x64,0x6E,0x6C,0x78,0x85,0x98,0x8C,0xA2,0x93,0xB2,0x93,0xAE,0x8F,0xA7,0x98,0xB6,0xA3,0xCB,0xAE,0xDB,0xAD,0xCF,0xAA,0xCC,0xB1,0xD4,0xB0,0xD0,0xA9,0xC7
,0xA6,0xBA,0x98,0xA5,0x89,0x8B,0x87,0x85,0x91,0x97,0x96,0x9E,0x84,0x88,0x84,0x82,0x94,0x95,0x8D,0x8E,0x79,0x6B,0x5E,0x41,0x57,0x3B,0x69,0x5A,0x6D,0x65,0x66,0x57,0x5B,0x42,0x68,0x58,0x76,0x71,0x6C,0x68,0x69,0x61,0x63,0x4B,0x52,0x30,0x4B,0x24,0x4F,0x29,0x5E,0x47,0x68,0x53,0x67,0x59,0x5F,0x4C,0x54,0x3A,0x63,0x4D,0x76,0x65,0x6B,0x5A,0x67,0x52,0x6A,0x54,0x78,0x6F,0x86,0x88,0x7A,0x7D,0x7D,0x86,0x84,0x8E,0x94,0xAD,0x9D,0xBB,0x8F,0xA1,0x86,0x89,0x8F,0x94,0x92,0x9E,0x9B,0xB1,0xA7,0xC8,0xA4,0xC2,0x99,0xB3
,0x8A,0x9C,0x8B,0x9F,0x94,0xA6,0xA1,0xAF,0x9E,0xA9,0x91,0x98,0x95,0xA2,0xA8,0xBF,0x9D,0xAD,0x88,0x90,0x7E,0x82,0x8B,0x92,0x96,0xA1,0x85,0x80,0x79,0x6E,0x7E,0x6D,0x91,0x86,0x95,0x93,0x8F,0x8B,0x81,0x76,0x74,0x61,0x68,0x4B,0x6C,0x59,0x84,0x7F,0x82,0x74,0x78,0x5A,0x79,0x5B,0x88,0x83,0x9D,0xA8,0xA0,0xAC,0x8A,0x85,0x67,0x44,0x57,0x28,0x73,0x58,0x8B,0x83,0x8B,0x7D,0x77,0x5C,0x72,0x59,0x8B,0x80,0x90,0x82,0x7C,0x61,0x72,0x51,0x78,0x61,0x80,0x6F,0x74,0x5E,0x70,0x57,0x86,0x7E,0x8A,0x88,0x77,0x68,0x7D,0x7A
//,0x99,0xAA,0x9E,0xB0,0x78,0x72,0x5E,0x48,0x73,0x74,0x8A,0x9B,0x80,0x8A,0x66,0x5E,0x65,0x5E,0x7E,0x92,0x85,0x98,0x7D,0x86,0x87,0x99,0x92,0xB2,0x86,0xA0,0x7E,0x92,0x85,0xA5,0x86,0xAE,0x83,0xA4,0x80,0x90,0x87,0x9C,0x91,0xB9,0x99,0xCB,0x99,0xC5,0x8D,0xB3,0x8D,0xBF,0x7E,0xA2,0x80,0x92,0x83,0x8D,0x74,0x76,0x6C,0x74,0x7A,0x90,0x92,0xB8,0x85,0xA4,0x61,0x6B,0x53,0x52,0x6C,0x71,0x6F,0x68,0x53,0x37,0x49,0x28,0x66,0x57,0x79,0x76,0x6A,0x5D,0x55,0x45,0x45,0x2D,0x61,0x51,0x72,0x5E,0x5E,0x39,0x59,0x2E,0x7C,0x5E
,0x8E,0x78,0x81,0x64,0x75,0x61,0x75,0x71,0x85,0x8D,0x88,0x84,0x7B,0x68,0x84,0x7A,0xAA,0xBD,0xB5,0xCB,0x92,0x8A,0x72,0x5E,0x8E,0x9E,0xB1,0xD2,0xA7,0xAD,0x8C,0x87,0x93,0x9F,0xBB,0xDB,0xC5,0xDB,0xB4,0xBF,0xA5,0xB8,0xAE,0xC8,0xB5,0xBC,0xA3,0x8E,0x8D,0x7A,0x9B,0x9F,0xB1,0xB6,0xAE,0xAB,0xA8,0xB0,0xB1,0xC0,0xAB,0xBD,0x8E,0x84,0x75,0x58,0x6E,0x5C,0x72,0x66,0x6A,0x59,0x60,0x41,0x4E,0x2E,0x64,0x63,0x7D,0x82,0x6B,0x5A,0x52,0x31,0x34,0x0B,0x3C,0x1B,0x4E,0x28,0x57,0x3F,0x5A,0x52,0x58,0x4C,0x5C,0x4A,0x62,0x49
,0x5C,0x4A,0x61,0x5D,0x69,0x5D,0x67,0x56,0x70,0x64,0x70,0x64,0x7A,0x7E,0x78,0x76,0x67,0x59,0x75,0x74,0x89,0x96,0x92,0xAD,0x94,0xAD,0x7D,0x8D,0x7C,0x99,0x8A,0xB4,0x8D,0xB0,0x8D,0xA7,0x7D,0x94,0x89,0xB6,0x92,0xB5,0x8F,0xA7,0x92,0xBC,0x90,0xC9,0x94,0xCB,0x8D,0xAB,0x80,0x95,0x7D,0x95,0x87,0x9B,0x95,0xA4,0x93,0x97,0x7A,0x6D,0x7F,0x7F,0x9E,0xA4,0x97,0x9C,0x84,0x9A,0x73,0x7D,0x75,0x6A,0x86,0x73,0x83,0x68,0x82,0x5E,0x86,0x5F,0x89,0x71,0x7D,0x6D,0x73,0x64,0x87,0x85,0x85,0x7D,0x78,0x63,0x73,0x4A,0x7C,0x3C
,0x96,0x6A,0xA2,0x8B,0x9B,0x84,0x89,0x64,0x7B,0x4C,0x78,0x64,0x86,0x7E,0x8A,0x6B,0x8A,0x69,0x86,0x75,0x87,0x6C,0x96,0x74,0x8D,0x80,0x77,0x79,0x6A,0x6B,0x5C,0x57,0x6D,0x6C,0x8D,0x9D,0x9A,0xB6,0x8B,0x94,0x7A,0x72,0x8E,0xA1,0x8A,0x9E,0x71,0x7C,0x71,0x82,0x79,0x96,0x7E,0xA6,0x7A,0x9A,0x7B,0x9A,0x8B,0xAE,0x93,0xB3,0x8F,0xB5,0x8E,0xB0,0x84,0x94,0x7F,0x98,0x80,0xA0,0x6D,0x76,0x6E,0x72,0x8D,0xB3,0x9D,0xD7,0x94,0xBD,0x76,0x92,0x71,0x88,0x83,0x9A,0x81,0x96,0x67,0x69,0x4F,0x40,0x66,0x6C,0x7D,0x9A,0x67,0x82
,0x63,0x76,0x74,0x84,0x6B,0x6F,0x52,0x3F,0x56,0x42,0x73,0x62,0x73,0x5E,0x5C,0x4A,0x64,0x53,0x7F,0x64,0x79,0x53,0x63,0x4A,0x57,0x43,0x70,0x4F,0x8C,0x6B,0x81,0x61,0x6F,0x46,0x6E,0x45,0x75,0x4F,0x7B,0x5C,0x7A,0x6B,0x75,0x63,0x73,0x5E,0x90,0x8B,0xAE,0xB9,0xAD,0xAE,0x9B,0x8B,0xA1,0x9B,0xAE,0xB9,0xA4,0xB1,0x93,0x9F,0x8F,0x94,0xA6,0xAB,0xB4,0xC1,0xB3,0xCA,0xB6,0xCE,0xC9,0xDF,0xCD,0xE7,0xA9,0xB8,0x7F,0x7A,0x85,0x83,0xA2,0xB7,0x92,0xA0,0x80,0x88,0x90,0x9D,0xA4,0xBD,0x9B,0xB4,0x72,0x6B,0x5A,0x39,0x6F,0x5D
,0x7A,0x87,0x53,0x57,0x38,0x1F,0x57,0x3F,0x87,0x89,0x7E,0x86,0x56,0x46,0x47,0x24,0x48,0x22,0x53,0x43,0x5C,0x5F,0x5A,0x52,0x5F,0x4B,0x64,0x55,0x69,0x65,0x68,0x5B,0x68,0x52,0x79,0x6E,0x6E,0x63,0x65,0x5A,0x63,0x4E,0x5F,0x4A,0x72,0x72,0x71,0x7D,0x5C,0x5C,0x66,0x55,0x93,0x99,0xA9,0xC6,0x94,0xA1,0x81,0x79,0x8C,0x92,0x8E,0xA9,0x8C,0xAC,0x94,0xAE,0x92,0x98,0x8D,0x85,0x90,0x98,0xA4,0xBB,0xC0,0xD3,0xCA,0xD4,0xAE,0xB7,0x96,0xA3,0x95,0xAB,0x9F,0xB4,0x8D,0x94,0x76,0x76,0x92,0x9C,0xA4,0xA3,0xA5,0x9A,0xB2,0xBC
//,0xA4,0xB1,0x8F,0x81,0x87,0x66,0x7D,0x6E,0x7D,0x81,0x83,0x74,0x88,0x56,0x81,0x53,0x81,0x6D,0x99,0x98,0xA5,0xA3,0x8D,0x6E,0x67,0x35,0x4D,0x25,0x5E,0x49,0x81,0x84,0x7B,0x83,0x66,0x67,0x62,0x5E,0x71,0x6A,0x69,0x63,0x48,0x47,0x4C,0x5E,0x58,0x72,0x56,0x68,0x47,0x57,0x3E,0x50,0x52,0x67,0x6D,0x78,0x5E,0x62,0x46,0x50,0x5C,0x7B,0x7E,0xA7,0x7F,0xAF,0x68,0x98,0x6C,0x8D,0x7F,0x93,0x87,0x95,0x8D,0xA6,0x82,0x98,0x7A,0x7F,0x89,0x97,0x8D,0xBC,0x8E,0xCD,0x98,0xC5,0xAC,0xB5,0xBD,0xB1,0xB8,0xA7,0xB5,0xAA,0x9C,0x8E
,0x83,0x6D,0x96,0x8B,0x9C,0x9B,0xAC,0xB1,0xD4,0xD7,0xCA,0xBF,0xAE,0x93,0x9F,0x74,0xA5,0x76,0xAD,0x8D,0x8E,0x74,0x76,0x5C,0x7A,0x68,0x8B,0x84,0x9D,0xA3,0x87,0x88,0x65,0x45,0x69,0x2D,0x6F,0x3C,0x66,0x50,0x59,0x58,0x60,0x5E,0x69,0x5A,0x58,0x3B,0x59,0x3C,0x69,0x46,0x70,0x44,0x71,0x51,0x53,0x3D,0x40,0x2F,0x62,0x5A,0x65,0x5E,0x56,0x49,0x63,0x49,0x79,0x59,0x89,0x7F,0x78,0x8D,0x79,0x98,0x8E,0xA8,0x8F,0xA5,0x84,0xA8,0x77,0x9C,0x7B,0x9E,0x94,0xB3,0x9A,0xB8,0x8D,0xAD,0x89,0xB5,0x9B,0xDE,0xB3,0xFF,0xA8,0xE9
#endif
,0xA4,0xD2,0xA0,0xCF,0x85,0xAD,0x78,0x8E,0x77,0x83,0x79,0x90,0x93,0xC0,0x98,0xCB,0x84,0xBA,0x85,0xB6,0x86,0x9A,0x87,0x74,0x7E,0x59,0x76,0x61,0x74,0x68,0x64,0x4A,0x68,0x48,0x75,0x6B,0x77,0x80,0x78,0x64,0x74,0x3B,0x6F,0x32,0x6F,0x3B,0x76,0x49,0x87,0x57,0x7D,0x54,0x68,0x51,0x65,0x55,0x58,0x43,0x63,0x4D,0x69,0x4F,0x65,0x3C,0x7C,0x4A,0x89,0x61,0x7D,0x64,0x6C,0x61,0x5E,0x59,0x62,0x55,0x63,0x55,0x68,0x56,0x85,0x73,0x96,0x85,0xA7,0x9B,0xA1,0x9D,0x8C,0x98,0x97,0xB8,0x9C,0xB1,0x90,0x94,0x78,0x72,0x6C,0x64
,/*0xA5,0xAB,0xC6,0xD1,0xC0,0xC9,0xB2,0xCD,0x9C,0xC3,0x8F,0xBE,0x75,0x99,0x58,0x74,0x72,0x83,0x8B,0x92,0x80,0x7F,0x81,0x90,0x99,0xCC,0xA6,0xD5,0x7E,0x88,0x4F,0x58,0x5B,0x7A,0x79,0x8D,0x84,0x6E,0x73,0x43,0x64,0x4D,0x84,0x93,0x90,0xA8,0x8E,0xA1,0x84,0x8A,0x5B,0x51,0x54,0x30,0x5F,0x43,0x75,0x82,0x8B,0x9E,0x79,0x73,0x70,0x59,0x77,0x6C,0x6F,0x74,0x74,0x69,0x7B,0x5C,0x84,0x67,0x7F,0x66,0x6A,0x56,0x7B,0x62,0x91,0x77,0x8B,0x70,0x86,0x5F,0x79,0x53,0x8E,0x65,0xB1,0x87,0xAA,0x88,0x9D,0x7D,0x8D,0x71,0xA1,0xA2
,0xB3,0xC5,0x94,0xA3,0x8B,0x85,0x98,0x88,0xA9,0xAA,0xB4,0xC2,0xA6,0xBA,0xA6,0xB2,0xA7,0xB6,0x8E,0xB4,0x8C,0xB0,0x92,0xAA,0x9D,0xB5,0x99,0xB2,0x7B,0x98,0x77,0x96,0x86,0xAA,0x82,0xA5,0x7D,0x99,0x73,0x9C,0x6E,0xA5,0x76,0xAB,0x67,0x94,0x67,0x88,0x58,0x71,0x52,0x6F,0x62,0x88,0x5A,0x7E,0x54,0x65,0x4C,0x53,0x57,0x64,0x71,0x7B,0x68,0x65,0x47,0x32,0x43,0x29,0x55,0x52,0x66,0x67,0x53,0x36,0x4B,0x20,0x6D,0x56,0x73,0x6E,0x66,0x4F,0x64,0x41,0x6F,0x60,0x84,0x7D,0x70,0x58,0x61,0x2E,0x89,0x64,0x9C,0x92,0x81,0x64
*/};
/* end binary data. size = 11840 bytes */



/* begin binary data: */
const uint8_t laser[] PROGMEM = /* 4400 */
{/*0x7F,0x80,0x80,0x80,0x80,0x81,0x80,0x80,0x81,0x80,0x7F,0x81,0x80,0x81,0x80,0x7F,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x7F,0x80,0x7F,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x7D,0x7E,0x74,0x74,0x6F,0x6F,0x77,0x77,0x80,0x80,0x91,0x91,0xA6,0xA6,0xB2,0xB2,0xB2,0xB2,0xB1,0xB1,0xA1,0xA1,0x74,0x74,0x48,0x48,0x3B,0x3A,0x52,0x51,0x86,0x85,0xBE,0xBF,0xD3,0xD3,0xAA,0xAA,0x69,0x69,0x3E,0x3E,0x2D,0x2D,0x2E,0x2E,0x36,0x37,0x40,0x40,0x4A,0x4A,0x5F,0x60,0x72,0x73,0x85,0x84
,0x91,0x90,0x9B,0x9C,0xAB,0xAC,0xB9,0xB8,0xC3,0xC3,0xBE,0xBE,0xBE,0xBE,0xC3,0xC3,0xC4,0xC4,0xBD,0xBD,0xA2,0xA3,0x70,0x6F,0x37,0x38,0x1A,0x1A,0x1B,0x1A,0x2A,0x2A,0x46,0x46,0x65,0x65,0x74,0x75,0x7C,0x7B,0x7E,0x7E,0x86,0x85,0x96,0x95,0xA4,0xA5,0xB5,0xB6,0xC0,0xC0,0xBD,0xBC,0xB5,0xB6,0xB7,0xB7,0xB6,0xB7,0xB5,0xB5,0xAC,0xAC,0x88,0x87,0x51,0x51,0x28,0x2A,0x18,0x18,0x18,0x18,0x26,0x26,0x41,0x41,0x5C,0x5C,0x75,0x75,0x83,0x82,0x87,0x88,0x8F,0x8F,0x97,0x97,0x9F,0x9F,0xA5,0xA4,0xA9,0xAA,0xB3,0xB3,0xBD,0xBC
,*/0xC3,0xC3,0xC9,0xC8,0xCC,0xCB,0xC0,0xBF,0x96,0x96,0x5A,0x5B,0x30,0x30,0x26,0x25,0x2C,0x2D,0x37,0x37,0x3F,0x3E,0x4C,0x4C,0x5D,0x5D,0x65,0x66,0x6C,0x6B,0x74,0x75,0x8A,0x8A,0xA8,0xA7,0xBA,0xB9,0xBD,0xBD,0xB7,0xB8,0xB6,0xB6,0xC0,0xBF,0xC5,0xC5,0xC5,0xC4,0xC3,0xC3,0xB3,0xB3,0x88,0x88,0x56,0x56,0x35,0x36,0x28,0x28,0x2C,0x2B,0x3E,0x3E,0x57,0x56,0x63,0x63,0x64,0x63,0x63,0x63,0x6E,0x6E,0x85,0x84,0x99,0x99,0xA2,0xA2,0xA2,0xA2,0xA3,0xA3,0xA8,0xA8,0xB2,0xB2,0xBB,0xBB,0xC5,0xC4,0xCA,0xCA,0xCD,0xCE,0xD2,0xD1
,0xC4,0xC3,0x96,0x97,0x59,0x58,0x2B,0x2B,0x18,0x18,0x17,0x17,0x20,0x20,0x2F,0x2E,0x42,0x42,0x54,0x53,0x61,0x62,0x6D,0x6C,0x78,0x77,0x88,0x88,0x98,0x99,0xA4,0xA4,0xAE,0xAE,0xB6,0xB6,0xBA,0xBA,0xBA,0xBA,0xBC,0xBB,0xBF,0xC0,0xC2,0xC2,0xC8,0xC8,0xC6,0xC7,0xA4,0xA5,0x6E,0x6E,0x40,0x41,0x26,0x26,0x1F,0x1F,0x28,0x26,0x35,0x36,0x42,0x41,0x4A,0x4A,0x52,0x52,0x5A,0x5B,0x66,0x66,0x73,0x74,0x85,0x85,0x9A,0x9A,0xA7,0xA7,0xAE,0xAD,0xB0,0xB0,0xB2,0xB2,0xBB,0xBA,0xC3,0xC2,0xC4,0xC3,0xBE,0xC0,0xBE,0xBD,0xB8,0xB8
#ifndef SOUND_MINIMUM
,0x98,0x99,0x68,0x68,0x42,0x42,0x32,0x32,0x34,0x34,0x3E,0x3D,0x4A,0x4A,0x57,0x57,0x61,0x61,0x68,0x69,0x6D,0x6D,0x6F,0x6E,0x70,0x6F,0x75,0x75,0x85,0x84,0x9A,0x9B,0xAB,0xAB,0xB0,0xB0,0xB1,0xB0,0xAF,0xB0,0xB3,0xB3,0xB7,0xB6,0xBB,0xBB,0xBB,0xBC,0xBA,0xBA,0xB7,0xB8,0xA5,0xA5,0x81,0x81,0x58,0x58,0x36,0x36,0x24,0x24,0x27,0x27,0x35,0x35,0x41,0x41,0x4A,0x4B,0x52,0x51,0x58,0x59,0x5F,0x5F,0x66,0x65,0x72,0x72,0x81,0x81,0x92,0x92,0xA3,0xA4,0xAE,0xAE,0xB3,0xB4,0xB5,0xB5,0xB2,0xB1,0xAB,0xAB,0xA7,0xA8,0xAA,0xAB
,0xB2,0xB2,0xC0,0xBE,0xC8,0xC7,0xB9,0xBA,0x9A,0x9A,0x70,0x6F,0x49,0x48,0x31,0x31,0x28,0x28,0x29,0x29,0x30,0x2F,0x38,0x38,0x41,0x40,0x4B,0x4A,0x59,0x59,0x6A,0x69,0x79,0x78,0x83,0x83,0x8E,0x8D,0x92,0x93,0x99,0x99,0xA3,0xA3,0xAD,0xAD,0xB1,0xB1,0xB3,0xB3,0xB3,0xB4,0xB6,0xB6,0xBE,0xBE,0xC6,0xC6,0xCB,0xCB,0xCA,0xCA,0xBC,0xBB,0x99,0x99,0x6A,0x6B,0x3F,0x40,0x28,0x28,0x20,0x20,0x27,0x27,0x30,0x30,0x3C,0x3B,0x41,0x41,0x4C,0x4B,0x53,0x54,0x64,0x65,0x6E,0x6E,0x7D,0x7E,0x8B,0x8A,0x98,0x97,0x9C,0x9C,0xA2,0xA2
,0xB6,0xB6,0xAE,0xAE,0xA0,0xA0,0xA9,0xAA,0xB1,0xB1,0xB2,0xB2,0xC5,0xC5,0xC4,0xC3,0xE4,0xE3,0x6D,0x6C,0x38,0x38,0x5B,0x5B,0x1D,0x1E,0x41,0x41,0x32,0x31,0x47,0x47,0x57,0x58,0x54,0x55,0x42,0x42,0x56,0x55,0x67,0x68,0x55,0x54,0xA0,0xA0,0x88,0x88,0x81,0x80,0x79,0x79,0x7D,0x7D,0x8D,0x8E,0x9E,0x9E,0x99,0x98,0x7F,0x7E,0x7C,0x7C,0x80,0x7F,0x8C,0x8D,0x79,0x78,0x97,0x96,0x87,0x88,0x7C,0x7C,0xA3,0xA3,0x8F,0x8F,0x79,0x79,0x78,0x78,0xB6,0xB5,0x9D,0x9D,0x6E,0x6E,0x7B,0x7C,0x95,0x95,0xA1,0xA0,0x7E,0x7E,0x6C,0x6B
,0x73,0x71,0xAA,0xAB,0x75,0x75,0x7D,0x7D,0x73,0x74,0x76,0x75,0x72,0x72,0x80,0x80,0x78,0x77,0x74,0x74,0x90,0x91,0x7D,0x7E,0x6E,0x6E,0x8F,0x90,0x75,0x75,0xC5,0xC5,0x8A,0x89,0x70,0x71,0x73,0x73,0x6E,0x6D,0x83,0x84,0x61,0x61,0x88,0x87,0x81,0x80,0x80,0x80,0x6E,0x6E,0x88,0x89,0x59,0x58,0x9B,0x9A,0x63,0x63,0xA6,0xA6,0x81,0x81,0x84,0x84,0x6D,0x6E,0xAB,0xAC,0x5E,0x5E,0xB6,0xB5,0x7E,0x7F,0x98,0x99,0x94,0x93,0x7C,0x7B,0x78,0x77,0x7B,0x7B,0x8D,0x8C,0x5B,0x5C,0xA1,0xA0,0x48,0x49,0xCA,0xC9,0x49,0x4A,0xC4,0xC4
,0x2E,0x2D,0xB2,0xB3,0x68,0x68,0xBD,0xBD,0x57,0x57,0x9D,0x9C,0x65,0x64,0x71,0x71,0x84,0x84,0x68,0x69,0xB4,0xB3,0x30,0x30,0xC9,0xC8,0x4D,0x4D,0xF0,0xF0,0x2B,0x2B,0xCA,0xCB,0x51,0x50,0xC8,0xC9,0x42,0x42,0x9E,0x9E,0x91,0x90,0x7D,0x7D,0xA2,0xA2,0x3B,0x3A,0xDB,0xDB,0x39,0x39,0xE5,0xE5,0x37,0x38,0xF0,0xF0,0x56,0x55,0xB0,0xB0,0x7B,0x7B,0x41,0x41,0xA2,0xA3,0x5B,0x5A,0xBA,0xBB,0x32,0x33,0xB8,0xB9,0x52,0x51,0xBF,0xBF,0x64,0x64,0x66,0x65,0xA8,0xA8,0x3E,0x3F,0xAF,0xB0,0x3E,0x3F,0xA8,0xA9,0x66,0x66,0x9C,0x9D
,0x79,0x79,0x7C,0x7D,0xBE,0xBD,0x2F,0x30,0xD5,0xD7,0x2B,0x2B,0xAC,0xAB,0x57,0x58,0x8A,0x8B,0xC1,0xC2,0x2C,0x2C,0xC5,0xC4,0x38,0x38,0xC2,0xC2,0x71,0x6F,0x94,0x93,0x7D,0x7E,0x55,0x55,0xAC,0xAC,0x2E,0x2E,0xBF,0xBF,0x59,0x59,0x91,0x92,0x9A,0x9B,0x48,0x48,0xCA,0xCA,0x46,0x46,0xCE,0xCF,0x74,0x73,0x7B,0x7A,0xA2,0xA2,0x5A,0x5B,0xC4,0xC2,0x22,0x22,0xA6,0xA5,0x49,0x48,0x70,0x70,0xB5,0xB6,0x44,0x45,0xDA,0xDB,0x4A,0x4A,0x8D,0x8D,0x94,0x93,0x56,0x54,0xC0,0xC0,0x20,0x1F,0xBC,0xBC,0x75,0x75,0x4F,0x50,0xC8,0xC8
,0x22,0x21,0xC6,0xC5,0x4F,0x4F,0x67,0x67,0xAC,0xAC,0x36,0x36,0xC8,0xC8,0x47,0x47,0xAC,0xAD,0x97,0x97,0x36,0x37,0xD2,0xD1,0x2E,0x2F,0xA4,0xA4,0x87,0x87,0x4B,0x4B,0xDF,0xDF,0x52,0x53,0x9C,0x9C,0x8A,0x8A,0x72,0x72,0xD7,0xD7,0x3C,0x3E,0xAA,0xAA,0x8A,0x88,0x3D,0x3C,0xC1,0xC1,0x49,0x49,0xAC,0xAB,0x8B,0x8B,0x48,0x49,0xC4,0xC5,0x3C,0x3B,0x9D,0x9C,0xA9,0xA9,0x36,0x36,0xBA,0xB9,0x4F,0x4F,0x73,0x73,0x98,0x99,0x28,0x28,0xBA,0xBA,0x79,0x7A,0x57,0x57,0xBC,0xBC,0x46,0x45,0x90,0x91,0x9B,0x9B,0x4E,0x4D,0xCD,0xCE
,0x67,0x67,0x68,0x68,0xB2,0xB2,0x26,0x26,0xB1,0xB1,0x7E,0x7D,0x56,0x56,0xF2,0xF2,0x3C,0x3C,0x83,0x84,0xCF,0xCF,0x35,0x35,0xBE,0xBF,0xA0,0xA1,0x55,0x55,0xC1,0xC1,0x41,0x41,0x7F,0x7F,0xA8,0xA8,0x3A,0x3B,0xC2,0xC2,0x65,0x65,0x69,0x68,0xC7,0xC7,0x31,0x31,0x7C,0x7C,0xAA,0xAA,0x37,0x37,0x9F,0x9F,0x91,0x92,0x28,0x29,0xE6,0xE6,0x7F,0x80,0x76,0x77,0xD4,0xD4,0x41,0x43,0x9E,0x9F,0xC6,0xC6,0x40,0x40,0xBA,0xBA,0xBB,0xBB,0x27,0x27,0xAD,0xAD,0x64,0x63,0x57,0x57,0xAE,0xAE,0x33,0x32,0x6A,0x6B,0xB2,0xB2,0x48,0x48
,0xC1,0xC2,0xB7,0xB6,0x29,0x2A,0xB5,0xB5,0x5F,0x5E,0x2F,0x2F,0xB6,0xB7,0x55,0x55,0x68,0x67,0xB2,0xB1,0x51,0x51,0x73,0x73,0xCB,0xCB,0x2D,0x2C,0x8A,0x8A,0xBD,0xBE,0x37,0x38,0xD7,0xD6,0x7D,0x7D,0x55,0x55,0xC4,0xC4,0x84,0x84,0x3C,0x3D,0xB2,0xB1,0x95,0x95,0x40,0x40,0xCF,0xCF,0x74,0x75,0x52,0x52,0xD1,0xD1,0x48,0x47,0x6C,0x6C,0xBA,0xBA,0x59,0x59,0x7B,0x7B,0xA0,0xA0,0x6D,0x6D,0x5E,0x5E,0xE3,0xE2,0x37,0x37,0x75,0x74,0xCD,0xCC,0x43,0x43,0x8E,0x8F,0xBC,0xBC,0x7A,0x7B,0x86,0x86,0xAA,0xAA,0x36,0x37,0x97,0x97
,0x99,0x99,0x45,0x45,0x8A,0x8A,0x99,0x9A,0x46,0x45,0xA9,0xA8,0xCF,0xCF,0x36,0x37,0x6C,0x6C,0xE8,0xE8,0x64,0x64,0x63,0x63,0xB5,0xB5,0x3D,0x3C,0x80,0x81,0xA7,0xA7,0x27,0x26,0x47,0x47,0xB5,0xB4,0x48,0x48,0x41,0x41,0xBF,0xBF,0x5C,0x5C,0x56,0x56,0xE3,0xE4,0x75,0x76,0x3C,0x3D,0xAB,0xAC,0x8D,0x8B,0x55,0x55,0xBA,0xBB,0x8F,0x8E,0x2A,0x2B,0xB4,0xB4,0x97,0x97,0x3A,0x3B,0x94,0x93,0xC5,0xC6,0x4B,0x4B,0x74,0x74,0xF1,0xF1,0x30,0x31,0x5F,0x5E,0xDF,0xDF,0x6C,0x6C,0x83,0x83,0xD3,0xD3,0x57,0x58,0x31,0x32,0xA8,0xA9
,0x8E,0x8E,0x47,0x47,0x87,0x87,0xB3,0xB4,0x44,0x43,0x77,0x78,0x9D,0x9C,0x74,0x75,0x61,0x61,0xBB,0xBB,0x7C,0x7A,0x42,0x43,0xC3,0xC3,0x84,0x84,0x4F,0x50,0x94,0x95,0xBC,0xBC,0x2A,0x2A,0x91,0x91,0xD1,0xD1,0x38,0x38,0x60,0x60,0xC6,0xC5,0x68,0x69,0x31,0x30,0xAF,0xB0,0xAE,0xAE,0x1D,0x1E,0x78,0x77,0xCD,0xCE,0x4C,0x4D,0x79,0x79,0xA4,0xA4,0x76,0x76,0x33,0x33,0x8A,0x89,0xB9,0xB9,0x2C,0x2C,0x79,0x7A,0xE0,0xE0,0x77,0x78,0x41,0x41,0xBA,0xBA,0xC1,0xC1,0x1D,0x1E,0x8B,0x8A,0xC3,0xC3,0x56,0x56,0x52,0x52,0xA5,0xA5
,0x7E,0x7E,0x1C,0x1B,0xAE,0xAE,0xC1,0xC2,0x69,0x6A,0x72,0x73,0xBB,0xBB,0x7D,0x7D,0x33,0x33,0xD0,0xD1,0x9B,0x9B,0x24,0x24,0x61,0x61,0xD7,0xD6,0x8E,0x8E,0x29,0x29,0xB9,0xB9,0x98,0x98,0x2B,0x2A,0x69,0x69,0xBC,0xBC,0x70,0x70,0x38,0x38,0xAB,0xAA,0xAD,0xAE,0x41,0x41,0x88,0x88,0xB8,0xB8,0x80,0x80,0x41,0x40,0x87,0x87,0xCB,0xCB,0x55,0x55,0x43,0x42,0xA2,0xA3,0xA4,0xA3,0x48,0x49,0x6F,0x6E,0xBA,0xBB,0x83,0x83,0x43,0x43,0xAF,0xAF,0xAF,0xAD,0x48,0x47,0x64,0x64,0xD0,0xD1,0x91,0x91,0x32,0x32,0x6A,0x6B,0xDF,0xDE
,0xAE,0xAE,0x32,0x32,0x94,0x95,0xC3,0xC3,0x51,0x50,0x52,0x52,0xC2,0xC2,0xAF,0xB0,0x60,0x60,0x40,0x3F,0xC7,0xC7,0x97,0x98,0x35,0x35,0x8B,0x8C,0xC7,0xC8,0x54,0x54,0x46,0x46,0xCD,0xCE,0xAA,0xAA,0x3C,0x3B,0x47,0x46,0xD6,0xD5,0xC0,0xC1,0x4C,0x4C,0x59,0x58,0xCB,0xCB,0x7E,0x7E,0x4F,0x4E,0x97,0x97,0xDE,0xDE,0x72,0x73,0x24,0x24,0x84,0x84,0xD7,0xD8,0xA9,0xAA,0x20,0x20,0x8C,0x8C,0xAE,0xAE,0x54,0x55,0x2A,0x2A,0x96,0x96,0xE5,0xE5,0x39,0x39,0x4A,0x4A,0xC4,0xC4,0x92,0x92,0x46,0x46,0x7B,0x7B,0xD7,0xD6,0xA3,0xA4
,0x56,0x56,0x32,0x32,0x98,0x97,0xC3,0xC3,0x61,0x60,0x36,0x36,0xC0,0xC1,0xD1,0xD1,0x30,0x30,0x72,0x73,0xCA,0xC9,0x86,0x87,0x3C,0x3B,0x6A,0x6A,0xB0,0xB0,0x9E,0x9D,0x51,0x51,0x44,0x44,0xCE,0xCE,0xEB,0xEB,0x36,0x35,0x53,0x54,0xA5,0xA5,0xA0,0xA1,0x43,0x43,0x32,0x32,0x95,0x95,0xB4,0xB3,0x78,0x79,0x31,0x32,0xA5,0xA5,0xC8,0xC7,0x59,0x58,0x4E,0x4E,0x9F,0x9F,0xB1,0xB1,0x62,0x62,0x2A,0x2A,0x6E,0x6D,0xE3,0xE3,0xAB,0xAB,0x1C,0x1C,0x5B,0x5B,0xAD,0xAD,0x8E,0x8E,0x31,0x31,0x5C,0x5C,0xB4,0xB5,0xA7,0xA6,0x52,0x51
,0x56,0x55,0x83,0x82,0xC6,0xC6,0x75,0x75,0x33,0x33,0x8B,0x8B,0xC1,0xC0,0x88,0x88,0x3A,0x3A,0xA1,0xA1,0xA8,0xA9,0x9F,0x9E,0x45,0x46,0x4A,0x49,0xB2,0xB2,0xD4,0xD4,0x66,0x66,0x4E,0x4E,0xA0,0xA0,0xBA,0xBA,0x78,0x77,0x44,0x44,0x7E,0x7E,0xA4,0xA4,0xB6,0xB6,0x31,0x32,0x46,0x46,0x9D,0x9C,0xD8,0xD9,0x9E,0x9F,0x38,0x38,0x7D,0x7E,0xC7,0xC6,0xBF,0xC0,0x1D,0x1C,0x52,0x52,0xC2,0xC2,0xE7,0xE6,0x73,0x73,0x30,0x2F,0x98,0x98,0xAB,0xAB,0x9A,0x9C,0x1C,0x1D,0x6F,0x6E,0xAE,0xAF,0xAF,0xB0,0x52,0x51,0x31,0x32,0x98,0x98
,0xB6,0xB7,0xC2,0xC2,0x28,0x27,0x35,0x35,0xAE,0xAE,0xC4,0xC4,0x7A,0x7B,0x51,0x51,0x8C,0x8C,0xC4,0xC5,0xB4,0xB5,0x3C,0x3C,0x46,0x46,0x97,0x97,0xBD,0xBC,0x6B,0x6C,0x1E,0x1E,0x64,0x64,0xB1,0xB0,0xD3,0xD3,0x54,0x53,0x30,0x30,0x86,0x86,0xA8,0xA8,0x8B,0x8B,0x47,0x47,0x6A,0x69,0xB2,0xB2,0xBD,0xBD,0x74,0x73,0x38,0x39,0x52,0x52,0xBC,0xBC,0xC9,0xC9,0x5C,0x5C,0x4A,0x4B,0x6F,0x70,0xA0,0xA1,0xB2,0xB2,0x4C,0x4C,0x5B,0x5B,0x7D,0x7E,0xAC,0xAC,0xC1,0xC2,0x35,0x34,0x32,0x32,0x9B,0x9A,0xC7,0xC7,0x8C,0x8C,0x3C,0x3D
,0x58,0x57,0xA9,0xA7,0xAB,0xAA,0x85,0x83,0x3D,0x3C,0x69,0x69,0xA8,0xA8,0xB5,0xB5,0x75,0x76,0x36,0x36,0x7C,0x7D,0xA1,0xA1,0xEE,0xEF,0x7B,0x7B,0x2D,0x2D,0x8A,0x8B,0x97,0x97,0xA9,0xA9,0x6D,0x6C,0x2B,0x2B,0x78,0x78,0xB2,0xB2,0xBC,0xBC,0x79,0x79,0x25,0x24,0x67,0x67,0x9A,0x9A,0xC0,0xC0,0x97,0x97,0x3F,0x3F,0x7B,0x7B,0xA2,0xA2,0xBA,0xBA,0xA9,0xA9,0x34,0x34,0x4B,0x4B,0xAA,0xAB,0xDE,0xDE,0x90,0x8F,0x1C,0x1B,0x4E,0x4E,0x85,0x85,0xBB,0xBA,0xB9,0xBA,0x50,0x51,0x43,0x42,0x95,0x95,0xE1,0xE1,0xB7,0xB6,0x42,0x41
,0x34,0x35,0x7B,0x7B,0xA5,0xA5,0xC2,0xC1,0x59,0x59,0x2C,0x2C,0x99,0x99,0xAD,0xAC,0xD8,0xD8,0x93,0x94,0x2D,0x2D,0x44,0x44,0x8F,0x8E,0xE4,0xE3,0x9E,0x9D,0x38,0x38,0x6D,0x6D,0x89,0x89,0x8D,0x8D,0xD0,0xCF,0x59,0x59,0x1B,0x1B,0x70,0x6F,0xA8,0xA7,0xC1,0xC0,0x69,0x69,0x1E,0x1D,0x76,0x76,0xB9,0xB8,0xBC,0xBC,0xA0,0x9F,0x2B,0x2B,0x38,0x37,0x85,0x85,0xB3,0xB3,0xCA,0xCA,0x5F,0x60,0x42,0x42,0x90,0x90,0x7E,0x7D,0xB4,0xB4,0xB8,0xB8,0x2A,0x2B,0x50,0x51,0xA4,0xA4,0xB3,0xB3,0xD7,0xD8,0x88,0x89,0x2B,0x2C,0x44,0x44
,0x89,0x88,0xAA,0xAB,0xB0,0xAF,0x46,0x47,0x46,0x46,0x9C,0x9C,0x8D,0x8D,0xD5,0xD6,0xB7,0xB7,0x2E,0x2E,0x73,0x73,0xA2,0xA1,0x99,0x9A,0xCC,0xCB,0x56,0x56,0x18,0x19,0x4F,0x4F,0x82,0x82,0xC0,0xC0,0xA2,0xA2,0x31,0x31,0x64,0x63,0x96,0x95,0x9C,0x9C,0xF2,0xF2,0xAB,0xAB,0x4B,0x4B,0x41,0x42,0x6E,0x6E,0x98,0x98,0xA9,0xAA,0x7D,0x7C,0x3B,0x3B,0x51,0x52,0x82,0x82,0xB1,0xB1,0xB0,0xAE,0x80,0x80,0x41,0x41,0x54,0x54,0x9B,0x9B,0xA4,0xA4,0xB5,0xB6,0x71,0x72,0x15,0x16,0x4F,0x4E,0x88,0x89,0xB1,0xB0,0xBE,0xBF,0x67,0x67
,0x29,0x28,0x49,0x49,0x8C,0x8B,0xA9,0xA8,0xA9,0xA9,0x78,0x77,0x31,0x30,0x4B,0x4B,0x91,0x91,0xB5,0xB5,0xCB,0xCB,0x67,0x66,0x1F,0x20,0x55,0x55,0x95,0x95,0xB2,0xB3,0xC9,0xC9,0x85,0x85,0x30,0x2F,0x3B,0x3A,0x94,0x94,0xC8,0xC8,0xBB,0xBA,0x95,0x95,0x26,0x27,0x44,0x43,0x8F,0x8F,0xA3,0xA2,0xC5,0xC5,0xA8,0xA8,0x34,0x34,0x41,0x41,0x87,0x87,0xB7,0xB7,0xC1,0xC0,0x99,0x99,0x3F,0x40,0x1E,0x1E,0x5E,0x5D,0xA8,0xA8,0xB0,0xB1,0xBF,0xBF,0x8D,0x8E,0x1E,0x1E,0x46,0x47,0xB5,0xB6,0xDB,0xDB,0xB0,0xB0,0x90,0x90,0x3C,0x3C
,0x3D,0x3D,0x5C,0x5C,0xAF,0xAE,0xC7,0xC7,0xB4,0xB4,0x50,0x51,0x19,0x19,0x51,0x51,0x9F,0x9F,0xBC,0xBD,0xB2,0xB3,0xA2,0xA1,0x33,0x32,0x55,0x55,0x7C,0x7B,0x90,0x90,0xA9,0xA9,0xBA,0xB9,0x63,0x63,0x39,0x39,0x50,0x50,0x77,0x78,0xB4,0xB3,0xB4,0xB4,0xA4,0xA5,0x60,0x5F,0x51,0x52,0x57,0x58,0x9E,0x9E,0xB7,0xB6,0xB5,0xB6,0x94,0x95,0x3D,0x3D,0x40,0x3F,0x67,0x67,0xB3,0xB2,0xC0,0xC0,0xB2,0xB2,0x6A,0x6B,0x21,0x20,0x3F,0x3F,0x75,0x75,0xA8,0xA8,0xB5,0xB5,0xB2,0xB2,0x4D,0x4D,0x2B,0x2B,0x5E,0x5E,0x7D,0x7D,0xB3,0xB3
,0xBA,0xBB,0xA1,0xA0,0x57,0x57,0x29,0x28,0x55,0x55,0xC5,0xC5,0xD7,0xD7,0xA2,0xA2,0x92,0x92,0x41,0x42,0x27,0x27,0x56,0x57,0x8A,0x8A,0xB6,0xB5,0xD4,0xD3,0xB2,0xB2,0x39,0x38,0x3B,0x3A,0x6D,0x6C,0x89,0x89,0xBA,0xBB,0xD3,0xD3,0xAF,0xAF,0x44,0x43,0x41,0x41,0x5D,0x5D,0x9F,0x9F,0xCC,0xCC,0xC9,0xCA,0xC8,0xC8,0x6D,0x6D,0x35,0x35,0x3E,0x3D,0x6B,0x6C,0xA8,0xA8,0xAF,0xAF,0xAD,0xAD,0x75,0x75,0x2E,0x2E,0x5A,0x5B,0x80,0x80,0x93,0x92,0x94,0x94,0xAE,0xAF,0x90,0x91,0x45,0x45,0x51,0x51,0x7D,0x7D,0x88,0x87,0x93,0x93
,0xB5,0xB4,0xA6,0xA5,0x50,0x4F,0x45,0x46,0x70,0x70,0x7B,0x7B,0x8E,0x8D,0xB9,0xB8,0xE4,0xE3,0x7E,0x7E,0x26,0x26,0x30,0x2F,0x63,0x63,0x92,0x92,0xAD,0xAD,0xBF,0xBE,0xA2,0xA1,0x46,0x46,0x24,0x25,0x5C,0x5D,0x94,0x94,0xB9,0xBA,0xCF,0xCF,0xE9,0xE8,0x8A,0x8A,0x19,0x19,0x21,0x20,0x70,0x71,0x96,0x97,0x94,0x94,0xB1,0xB1,0xA9,0xA9,0x55,0x55,0x33,0x32,0x59,0x58,0x6A,0x6A,0xA4,0xA4,0xB5,0xB5,0xA9,0xA8,0xA7,0xA7,0x5A,0x5B,0x2A,0x2A,0x53,0x53,0x89,0x8A,0x9F,0x9F,0xC1,0xC1,0xCF,0xCE,0xAB,0xAB,0x4A,0x49,0x1C,0x1C
,0x3C,0x3C,0x79,0x7A,0xC5,0xC4,0xBA,0xB9,0xB0,0xB0,0x7B,0x7B,0x39,0x39,0x50,0x50,0x76,0x76,0x7E,0x7E,0x9B,0x9A,0xBD,0xBC,0xC9,0xCA,0x80,0x81,0x27,0x27,0x34,0x34,0x52,0x52,0x7B,0x7B,0xAA,0xAB,0xD4,0xD4,0xD0,0xD0,0xA9,0xA9,0x49,0x4A,0x14,0x14,0x3B,0x3B,0x6D,0x6C,0xA8,0xA8,0xBF,0xBD,0xBB,0xBB,0x93,0x93,0x57,0x58,0x46,0x47,0x7F,0x80,0x9B,0x9B,0x91,0x91,0x98,0x99,0xB0,0xB1,0xCC,0xCB,0x77,0x76,0x2D,0x2D,0x50,0x50,0x74,0x74,0x8C,0x8C,0xC1,0xC2,0xCC,0xCB,0xB0,0xB1,0x6D,0x6D,0x2E,0x2E,0x3C,0x3C,0x50,0x51
,0x73,0x74,0xB6,0xB7,0xCC,0xCD,0xDD,0xDC,0xD5,0xD4,0x59,0x58,0x1E,0x1D,0x41,0x41,0x6B,0x6C,0x87,0x87,0xA0,0xA1,0xB6,0xB5,0xC8,0xC9,0x88,0x88,0x2A,0x2A,0x24,0x24,0x41,0x41,0x84,0x83,0x9A,0x9A,0x95,0x95,0xBA,0xBA,0xD0,0xCF,0x6D,0x6C,0x39,0x39,0x68,0x68,0x69,0x69,0x6B,0x6B,0x8C,0x8C,0xAE,0xAD,0xB8,0xB7,0xA0,0xA1,0x54,0x54,0x2D,0x2D,0x45,0x45,0x64,0x64,0x82,0x81,0x98,0x98,0xA9,0xA9,0xB3,0xB5,0xA0,0xA1,0x4F,0x4F,0x1F,0x1F,0x35,0x36,0x66,0x66,0x96,0x95,0xA9,0xAA,0xC1,0xC1,0xCF,0xCF,0xBA,0xBA,0x64,0x65
,0x26,0x26,0x44,0x44,0x67,0x67,0x8B,0x8C,0xAB,0xAB,0xA8,0xA8,0xB0,0xAF,0xC3,0xC3,0x79,0x79,0x23,0x24,0x26,0x27,0x59,0x59,0xA2,0xA3,0xB2,0xB1,0xB1,0xB1,0xC6,0xC6,0xC2,0xC3,0x7D,0x7D,0x2B,0x2A,0x1C,0x1C,0x39,0x3A,0x6F,0x6F,0xA9,0xA9,0xD1,0xD0,0xC7,0xC7,0xB3,0xB3,0x88,0x88,0x38,0x39,0x4C,0x4B,0x6A,0x69,0x65,0x66,0x74,0x74,0x8B,0x8B,0xBC,0xBB,0xCE,0xCE,0xC7,0xC7,0x7D,0x7C,0x2C,0x2B,0x30,0x30,0x4C,0x4D,0x78,0x77,0xA7,0xA7,0xB1,0xB2,0xAA,0xA9,0xAA,0xA9,0x98,0x98,0x61,0x60,0x44,0x44,0x4A,0x4A,0x5A,0x5A
,0x86,0x86,0x9B,0x9C,0xB4,0xB3,0xD1,0xD0,0xC9,0xC9,0x85,0x85,0x41,0x42,0x35,0x35,0x40,0x40,0x59,0x59,0x8D,0x8E,0xB9,0xB8,0xC3,0xC3,0xC4,0xC5,0xAB,0xAC,0x6F,0x6F,0x27,0x26,0x31,0x31,0x5F,0x5F,0x7C,0x7C,0x95,0x95,0xAC,0xAC,0xAF,0xAF,0xA2,0xA3,0x9D,0x9D,0x6B,0x6A,0x31,0x32,0x26,0x27,0x4F,0x4F,0x7F,0x7F,0x93,0x93,0xA5,0xA5,0xB3,0xB3,0xB3,0xB2,0xCF,0xCF,0xA6,0xA6,0x31,0x30,0x10,0x10,0x31,0x31,0x54,0x54,0x87,0x87,0xB5,0xB6,0xC2,0xC1,0xB5,0xB5,0xA9,0xAA,0xA0,0xA0,0x64,0x64,0x30,0x31,0x37,0x38,0x4D,0x4C
,0x62,0x62,0x96,0x96,0xB5,0xB5,0xBC,0xBC,0xC6,0xC6,0xDF,0xDF,0x93,0x94,0x1F,0x1E,0x0E,0x0C,0x3B,0x3B,0x7C,0x7C,0x8F,0x90,0x9B,0x9B,0xB1,0xB1,0xBF,0xBF,0xCF,0xCF,0xB9,0xB8,0x5C,0x5D,0x2B,0x2B,0x30,0x2F,0x57,0x57,0x73,0x74,0x8F,0x8E,0xBC,0xBC,0xB2,0xB3,0xA1,0xA1,0xB9,0xBA,0xAC,0xAC,0x55,0x55,0x1A,0x1B,0x28,0x27,0x66,0x66,0x86,0x85,0x85,0x86,0x96,0x95,0xAB,0xAC,0xAA,0xAA,0xA9,0xAA,0x8B,0x8B,0x57,0x56,0x3F,0x40,0x3D,0x3C,0x62,0x62,0x8F,0x8F,0xAE,0xAE,0xC9,0xC9,0xD1,0xD0,0xC6,0xC7,0xBC,0xBC,0x97,0x97
//,0x5A,0x58,0x2F,0x2E,0x2A,0x2A,0x58,0x58,0x74,0x75,0x7D,0x7D,0xA0,0x9F,0xBC,0xBD,0xB9,0xB9,0xAE,0xAE,0xA3,0xA3,0x64,0x64,0x32,0x32,0x25,0x24,0x32,0x32,0x53,0x52,0x72,0x73,0x9D,0x9D,0xAF,0xAF,0xB6,0xB7,0xBA,0xBB,0xB5,0xB5,0x92,0x92,0x54,0x53,0x2F,0x2E,0x3E,0x3D,0x62,0x61,0x75,0x74,0x89,0x89,0x9F,0x9E,0xAE,0xAD,0xC3,0xC3,0xDC,0xDC,0xC7,0xC8,0x6D,0x6E,0x22,0x22,0x19,0x1A,0x3C,0x3C,0x60,0x60,0x85,0x85,0xAC,0xAB,0xB5,0xB4,0xB9,0xBA,0xB3,0xB3,0xB2,0xB3,0xA8,0xA8,0x5B,0x5B,0x21,0x21,0x2B,0x2B,0x3E,0x3E
,0x52,0x52,0x70,0x6F,0x9B,0x9C,0xB9,0xBA,0xB7,0xB8,0xBB,0xBB,0xBA,0xB9,0x9E,0x9E,0x5B,0x5B,0x33,0x32,0x32,0x33,0x41,0x41,0x55,0x55,0x74,0x74,0x9B,0x9B,0xB5,0xB6,0xCC,0xCB,0xC9,0xCA,0xC0,0xBF,0xAE,0xAD,0x67,0x67,0x2A,0x2A,0x2E,0x2E,0x46,0x47,0x5D,0x5E,0x6D,0x6C,0x8D,0x8E,0xAC,0xAC,0xAC,0xAC,0xB2,0xB1,0xBB,0xBB,0xBF,0xC0,0xA1,0xA1,0x61,0x61,0x37,0x37,0x3B,0x3B,0x5B,0x5B,0x6E,0x6E,0x82,0x82,0xA4,0xA4,0xB6,0xB7,0xBF,0xBF,0xBA,0xBA,0xB1,0xB2,0xA8,0xA8,0x84,0x84,0x49,0x48,0x2D,0x2E,0x44,0x44,0x5B,0x5B
,0x61,0x62,0x6D,0x6D,0x8A,0x8A,0xA8,0xA8,0xB3,0xB2,0xB3,0xB3,0xB8,0xB9,0xBD,0xBD,0x8A,0x8B,0x48,0x48,0x2B,0x2B,0x2C,0x2B,0x39,0x39,0x52,0x52,0x81,0x80,0xB6,0xB5,0xC0,0xC0,0xAB,0xAC,0xB6,0xB6,0xC4,0xC5,0xB3,0xB3,0x78,0x78,0x32,0x32,0x10,0x11,0x1B,0x1C,0x37,0x36,0x53,0x54,0x79,0x7A,0xA3,0xA3,0xCC,0xCC,0xD4,0xD4,0xC4,0xC4,0xB7,0xB7,0xBE,0xBD,0x95,0x95,0x43,0x43,0x22,0x22,0x32,0x33,0x51,0x50,0x61,0x61,0x74,0x74,0x8C,0x8C,0xA0,0x9F,0xB3,0xB4,0xB7,0xB7,0xB8,0xB7,0xC5,0xC5,0xBB,0xBB,0x7A,0x7A,0x36,0x37
,0x20,0x20,0x32,0x33,0x50,0x51,0x67,0x67,0x83,0x82,0x93,0x94,0xA2,0xA2,0xAB,0xAB,0xB1,0xB1,0xB4,0xB4,0xB4,0xB2,0xA8,0xA8,0x6B,0x6B,0x2D,0x2C,0x24,0x24,0x3E,0x3F,0x5B,0x5C,0x6A,0x6A,0x73,0x74,0x86,0x86,0xA8,0xA6,0xC3,0xC1,0xC8,0xC7,0xBA,0xBA,0xB7,0xB6,0xAE,0xAE,0x7A,0x7A,0x49,0x49,0x3A,0x3A,0x3F,0x3E,0x57,0x57,0x77,0x76,0x81,0x82,0x8E,0x8D,0x9A,0x99,0x9E,0x9E,0xA7,0xA7,0xB4,0xB4,0xC1,0xC0,0xBE,0xBD,0x94,0x94,0x54,0x55,0x30,0x2F,0x32,0x33,0x4A,0x4A,0x5F,0x60,0x6E,0x6E,0x74,0x73,0x80,0x80,0x94,0x94
,0xB4,0xB4,0xC2,0xC4,0xBE,0xBF,0xBB,0xBC,0xB3,0xB3,0x85,0x85,0x48,0x48,0x37,0x37,0x46,0x46,0x62,0x63,0x72,0x71,0x6D,0x6D,0x71,0x71,0x8C,0x8D,0xA1,0xA1,0xA7,0xA8,0xB7,0xB6,0xC2,0xC2,0xC8,0xC7,0xC0,0xC1,0x8D,0x8D,0x47,0x47,0x29,0x29,0x32,0x32,0x49,0x49,0x5C,0x5C,0x6C,0x6C,0x7D,0x7C,0x8A,0x8A,0xA4,0xA4,0xC1,0xC0,0xC8,0xC8,0xC3,0xC3,0xB5,0xB5,0xA9,0xA9,0x8B,0x8B,0x5A,0x5A,0x39,0x39,0x2B,0x2B,0x3A,0x3A,0x53,0x53,0x6A,0x6A,0x79,0x79,0x7D,0x7D,0x85,0x84,0x92,0x92,0x9F,0x9E,0xA7,0xA8,0xB2,0xB2,0xBC,0xBB
,0xB4,0xB4,0x87,0x88,0x4C,0x4C,0x31,0x30,0x33,0x34,0x44,0x45,0x59,0x59,0x76,0x76,0x8D,0x8C,0x97,0x96,0x9E,0x9E,0x9E,0x9D,0xA3,0xA3,0xB8,0xB7,0xBE,0xBF,0xB2,0xB2,0x9E,0x9F,0x74,0x74,0x51,0x51,0x45,0x45,0x4C,0x4B,0x5C,0x5B,0x64,0x64,0x62,0x62,0x61,0x60,0x75,0x75,0x95,0x95,0xA9,0xAA,0xAF,0xAE,0xAF,0xAE,0xB6,0xB7,0xBD,0xBD,0xBF,0xBF,0xAD,0xAD,0x75,0x74,0x3E,0x3E,0x2E,0x2E,0x36,0x37,0x41,0x40,0x4F,0x4F,0x65,0x65,0x76,0x75,0x83,0x84,0x94,0x94,0xA1,0xA3,0xA4,0xA3,0xA5,0xA5,0xA8,0xA9,0xA8,0xA8,0xA2,0xA3
,0x89,0x8A,0x5F,0x5F,0x48,0x48,0x4C,0x4D,0x59,0x58,0x5C,0x5D,0x5D,0x5E,0x64,0x64,0x75,0x75,0x8B,0x8B,0x99,0x9A,0x9D,0x9E,0x9E,0x9E,0xA3,0xA3,0xA8,0xA9,0xAB,0xAB,0xAB,0xAA,0x98,0x98,0x6C,0x6D,0x48,0x48,0x40,0x40,0x4B,0x4A,0x55,0x55,0x61,0x60,0x6B,0x6A,0x71,0x71,0x7B,0x7A,0x8A,0x8B,0x9C,0x9A,0xAB,0xAA,0xAC,0xAC,0xAA,0xA9,0xA9,0xA9,0xA8,0xA8,0xAA,0xAA,0x8C,0x8C,0x62,0x62,0x49,0x49,0x45,0x44,0x4C,0x4B,0x55,0x55,0x5B,0x5B,0x62,0x62,0x70,0x71,0x85,0x85,0x9A,0x9A,0xA8,0xA8,0xB1,0xB3,0xB2,0xB2,0xA9,0xAA
,0xA8,0xA9,0xA6,0xA7,0x9E,0x9F,0x88,0x8A,0x6B,0x6C,0x55,0x55,0x4B,0x4A,0x50,0x50,0x63,0x62,0x76,0x77,0x7E,0x7D,0x7A,0x7A,0x74,0x75,0x7E,0x7E,0x90,0x90,0x9E,0x9C,0xA4,0xA5,0xA7,0xA7,0xA5,0xA5,0xA5,0xA4,0xA4,0xA3,0x90,0x91,0x6C,0x6D,0x52,0x52,0x4A,0x4A,0x4B,0x4B,0x55,0x55,0x61,0x61,0x67,0x68,0x6F,0x6E,0x78,0x78,0x82,0x82,0x8D,0x8D,0x99,0x9A,0xA1,0xA0,0xA4,0xA5,0xAF,0xAF,0xB6,0xB6,0xB3,0xB3,0xAD,0xAD,0x9B,0x9A,0x75,0x76,0x53,0x53,0x4B,0x4A,0x52,0x53,0x59,0x59,0x61,0x61,0x67,0x67,0x6B,0x6B,0x71,0x71
#endif
,0x7A,0x7B,0x86,0x87,0x93,0x93,0x9E,0x9D,0xA0,0xA1,0xA0,0xA1,0xA1,0xA1,0xA1,0xA1,0xA4,0xA4,0xA2,0xA2,0x8B,0x8C,0x6D,0x6C,0x56,0x56,0x4F,0x4E,0x50,0x50,0x53,0x53,0x5C,0x5D,0x6C,0x6D,0x7A,0x7B,0x81,0x81,0x84,0x83,0x83,0x83,0x89,0x89,0x91,0x90,0x99,0x99,0x9E,0x9E,0xA0,0xA0,0xA0,0x9F,0x9F,0xA0,0x9F,0xA1,0x8F,0x90,0x71,0x71,0x5A,0x5B,0x51,0x51,0x52,0x53,0x5A,0x59,0x61,0x61,0x67,0x66,0x6C,0x6C,0x77,0x77,0x82,0x82,0x8B,0x8B,0x90,0x90,0x99,0x99,0xA3,0xA3,0xAA,0xA9,0xA5,0xA5,0x9D,0x9D,0x99,0x99,0x98,0x98
//,0x91,0x92,0x7F,0x7F,0x6F,0x6F,0x61,0x61,0x5B,0x5B,0x5C,0x5C,0x63,0x63,0x6B,0x6A,0x6E,0x6E,0x6E,0x6E,0x72,0x71,0x7A,0x79,0x82,0x82,0x8C,0x8C,0x97,0x98,0x9E,0x9F,0xA1,0xA1,0xA3,0xA3,0xA2,0xA2,0xA3,0xA2,0xA3,0xA2,0x9A,0x98,0x82,0x83,0x6C,0x6C,0x5C,0x5D,0x57,0x56,0x5B,0x5A,0x62,0x61,0x66,0x67,0x6B,0x6B,0x71,0x71,0x7C,0x7C,0x8A,0x8A,0x93,0x93,0x94,0x93,0x91,0x91,0x8F,0x8E,0x90,0x90,0x93,0x93,0x97,0x97,0x9B,0x9B,0x9D,0x9D,0x9C,0x9C,0x98,0x98,0x85,0x85,0x6C,0x6D,0x5C,0x5C,0x53,0x53,0x54,0x54,0x59,0x5A
,/*0x5F,0x60,0x67,0x67,0x70,0x70,0x76,0x76,0x7B,0x7A,0x7F,0x7F,0x89,0x8A,0x92,0x92,0x94,0x95,0x96,0x96,0x98,0x98,0x99,0x99,0x9A,0x99,0x9B,0x9A,0x98,0x97,0x97,0x97,0x90,0x90,0x7E,0x7D,0x6D,0x6C,0x63,0x62,0x62,0x61,0x64,0x64,0x68,0x67,0x69,0x69,0x6D,0x6C,0x72,0x71,0x78,0x78,0x7E,0x7D,0x82,0x82,0x87,0x87,0x8B,0x8C,0x8F,0x8F,0x95,0x95,0x99,0x9A,0x9B,0x9B,0x98,0x99,0x93,0x94,0x8F,0x8F,0x8B,0x8C,0x84,0x85,0x76,0x76,0x68,0x69,0x61,0x61,0x61,0x61,0x64,0x64,0x68,0x67,0x6A,0x6A,0x6D,0x6D,0x70,0x70,0x78,0x77
,0x81,0x80,0x85,0x86,0x86,0x87,0x86,0x86,0x86,0x87,0x89,0x89,0x8E,0x8D,0x92,0x92,0x97,0x97,0x99,0x9A,0x9E,0x9E,0x8A,0x89,0x7D,0x7E,0x81,0x81,0x7F,0x7F,0x80,0x80,0x7F,0x7F,0x81,0x81,0x7F,0x80,0x81,0x80,0x80,0x80,0x81,0x81,0x80,0x7F,0x80,0x80,0x80,0x7F,0x80,0x81,0x80,0x80,0x81,0x80,0x80,0x81,0x80,0x80,0x80,0x81,0x80,0x80,0x7F,0x80,0x80,0x80,0x80,0x81,0x80,0x7F,0x80,0x7F,0x80,0x7F,0x80,0x80,0x80,0x80,0x7F,0x80,0x81,0x7F,0x80,0x80,0x7F,0x80,0x80,0x80,0x81,0x80,0x7F,0x80,0x80,0x7F,0x80,0x80,0x81,0x80
*/};
/* end binary data. size = 4400 bytes */



/* begin binary data: */
const uint8_t refuel[] PROGMEM = /* 2737 */
{
/*0x81,0x80,0x80,0x80,0x7F,0x80,0x80,0x80,0x81,0x80,0x81,0x80,0x80,0x81,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x81,0x80,0x80,0x80,0x81,0x7F,0x80,0x80,0x81,0x80,0x81,0x81,0x81,0x81,0x81,0x80,0x7F,0x80,0x7F,0x7F,0x80,0x7F,0x80,0x80,0x80,0x80,0x80,0x80,0x7F,0x7F,0x7E,0x7E,0x7E,0x7F,0x7F,0x80,0x7F,0x80,0x81,0x81,0x81,0x81,0x81,0x7F,0x80,0x7F,0x7F,0x80,0x81,0x81,0x82,0x83,0x83,0x83,0x83,0x82,0x82,0x7F,0x7F,0x7E,0x7E,0x7F,0x7F,0x7F,0x81,0x80,0x80,0x80,0x7E,0x7D,0x7D,0x7B,0x7B,0x7D,0x7D,0x7F,0x81
,*/0x83,0x83,0x85,0x84,0x83,0x82,0x81,0x81,0x80,0x82,0x83,0x85,0x88,0x89,0x8A,0x89,0x88,0x86,0x83,0x7E,0x78,0x73,0x6D,0x6A,0x67,0x68,0x69,0x6D,0x71,0x75,0x77,0x78,0x79,0x79,0x7A,0x7C,0x81,0x88,0x91,0x97,0x9B,0x9E,0x9E,0x9F,0x9D,0x98,0x93,0x8F,0x8B,0x88,0x87,0x84,0x82,0x80,0x7D,0x78,0x71,0x6B,0x65,0x61,0x5F,0x5E,0x5F,0x62,0x69,0x74,0x7C,0x82,0x82,0x7E,0x7A,0x76,0x78,0x80,0x8D,0x9C,0xA2,0xA7,0xA9,0xA6,0x9D,0x94,0x8B,0x8A,0x8F,0x93,0x95,0x93,0x8A,0x7E,0x73,0x6A,0x64,0x62,0x61,0x5E,0x5C,0x5B,0x5D,0x65
#ifndef SOUND_MINIMUM
,0x71,0x7D,0x83,0x81,0x7B,0x74,0x72,0x79,0x88,0x9C,0xA5,0xAE,0xAD,0xA4,0x94,0x89,0x88,0x8B,0x94,0x95,0x92,0x87,0x7A,0x6F,0x67,0x66,0x67,0x67,0x65,0x5F,0x5B,0x5A,0x61,0x6E,0x7E,0x89,0x8B,0x87,0x81,0x80,0x85,0x91,0xA1,0xAC,0xB3,0xB0,0xA6,0x94,0x85,0x7D,0x7E,0x85,0x8A,0x8A,0x81,0x73,0x63,0x57,0x52,0x53,0x5B,0x66,0x70,0x72,0x73,0x72,0x74,0x7D,0x88,0x95,0x9C,0x9F,0x9C,0x98,0x97,0x9A,0xA0,0xA3,0xA3,0x99,0x8A,0x79,0x6D,0x67,0x66,0x6C,0x72,0x73,0x6E,0x63,0x59,0x54,0x58,0x62,0x73,0x84,0x91,0x98,0x97,0x95
//,0x92,0x94,0x99,0xA2,0xAA,0xAC,0xA8,0x9A,0x8C,0x7E,0x76,0x70,0x6F,0x6E,0x6A,0x62,0x5A,0x56,0x57,0x5B,0x66,0x70,0x7A,0x7B,0x7E,0x83,0x8B,0x95,0xA1,0xAE,0xB5,0xB3,0xA8,0x9E,0x92,0x89,0x84,0x82,0x7F,0x78,0x70,0x65,0x5B,0x54,0x55,0x5A,0x62,0x6D,0x75,0x7B,0x7E,0x81,0x89,0x90,0x9A,0xA2,0xA8,0xA9,0xA4,0x9C,0x95,0x8C,0x87,0x82,0x7B,0x71,0x64,0x5A,0x50,0x4B,0x4F,0x56,0x60,0x68,0x70,0x76,0x7C,0x86,0x94,0xA3,0xB2,0xBD,0xC2,0xC1,0xBB,0xB4,0xAA,0xA0,0x96,0x89,0x7A,0x6B,0x5B,0x4C,0x40,0x3A,0x3A,0x3F,0x46,0x4D
,0x5A,0x6B,0x79,0x8A,0xA0,0xB3,0xC0,0xC9,0xCE,0xCB,0xC2,0xB9,0xAE,0x9E,0x8E,0x7D,0x6A,0x52,0x40,0x33,0x2B,0x2B,0x34,0x42,0x54,0x68,0x7E,0x96,0xAF,0xC2,0xD2,0xDF,0xE0,0xD9,0xCD,0xBC,0xA1,0x82,0x67,0x4B,0x2F,0x1F,0x16,0x14,0x16,0x21,0x38,0x56,0x7B,0xA3,0xC8,0xE1,0xED,0xF4,0xF5,0xF3,0xE5,0xCE,0xAE,0x81,0x53,0x2D,0x18,0x10,0x0D,0x0C,0x13,0x22,0x43,0x6F,0x9D,0xC8,0xE5,0xF3,0xFA,0xFA,0xF1,0xDB,0xB9,0x8A,0x5E,0x34,0x1A,0x0E,0x07,0x0C,0x1D,0x3E,0x6F,0x9D,0xBD,0xDB,0xEF,0xF7,0xF9,0xE6,0xD5,0xA6,0x64,0x3F
//,0x1D,0x0B,0x07,0x08,0x08,0x1D,0x55,0x82,0xB3,0xE0,0xF4,0xFF,0xF8,0xE2,0xBE,0x99,0x77,0x55,0x3A,0x27,0x1C,0x17,0x25,0x47,0x6F,0xA0,0xD3,0xEE,0xF3,0xEE,0xD0,0x99,0x6C,0x4D,0x2F,0x1F,0x23,0x30,0x3F,0x56,0x78,0x9A,0xBD,0xDE,0xF1,0xF1,0xDF,0xBC,0x88,0x56,0x2B,0x11,0x06,0x0D,0x22,0x44,0x73,0xA4,0xCB,0xE7,0xF8,0xF7,0xE4,0xC7,0x9C,0x68,0x39,0x1A,0x0C,0x0B,0x21,0x47,0x71,0x9D,0xC6,0xE0,0xEC,0xED,0xDF,0xC0,0x99,0x6F,0x43,0x22,0x14,0x13,0x1E,0x3D,0x66,0x8A,0xAD,0xCC,0xD8,0xD3,0xC3,0xAB,0x89,0x6A,0x56,0x48
,0x44,0x4C,0x5D,0x72,0x87,0x9F,0xB1,0xB7,0xB8,0xAE,0x9B,0x84,0x70,0x5E,0x52,0x4E,0x53,0x5B,0x6A,0x7B,0x8B,0x97,0x9D,0x9E,0x99,0x8E,0x83,0x7A,0x72,0x6C,0x6C,0x6E,0x75,0x7F,0x88,0x8C,0x8F,0x8E,0x89,0x82,0x7A,0x75,0x71,0x70,0x73,0x78,0x7F,0x88,0x8F,0x94,0x96,0x92,0x8B,0x83,0x79,0x72,0x6E,0x6C,0x6E,0x71,0x78,0x80,0x88,0x8F,0x94,0x93,0x8F,0x89,0x80,0x78,0x72,0x6E,0x6D,0x6F,0x73,0x79,0x80,0x86,0x8A,0x8B,0x8A,0x87,0x81,0x7E,0x7A,0x78,0x78,0x79,0x7E,0x81,0x87,0x8C,0x8E,0x8E,0x8C,0x88,0x83,0x7E,0x7B,0x79
//,0x78,0x7A,0x7E,0x81,0x83,0x85,0x85,0x84,0x80,0x7A,0x76,0x72,0x6E,0x6E,0x6F,0x74,0x7A,0x83,0x8A,0x91,0x96,0x95,0x94,0x8F,0x88,0x81,0x79,0x74,0x72,0x72,0x76,0x79,0x80,0x85,0x88,0x8A,0x89,0x87,0x86,0x80,0x7B,0x7A,0x75,0x79,0x7B,0x7A,0x7F,0x83,0x80,0x87,0x84,0x80,0x83,0x80,0x7D,0x81,0x7D,0x7F,0x86,0x85,0x89,0x8A,0x88,0x86,0x83,0x7D,0x7A,0x77,0x75,0x75,0x75,0x7A,0x7D,0x83,0x86,0x88,0x8B,0x88,0x85,0x82,0x7D,0x7A,0x78,0x77,0x79,0x7C,0x7F,0x84,0x86,0x87,0x88,0x85,0x81,0x7D,0x7A,0x78,0x77,0x79,0x7C,0x7F
//,0x84,0x89,0x8B,0x8D,0x8D,0x89,0x85,0x80,0x7C,0x78,0x76,0x76,0x78,0x7B,0x7F,0x82,0x85,0x87,0x87,0x87,0x84,0x80,0x7D,0x7B,0x7A,0x79,0x7B,0x7D,0x80,0x81,0x85,0x84,0x84,0x82,0x7F,0x7C,0x7B,0x7B,0x7C,0x7E,0x80,0x83,0x85,0x87,0x87,0x87,0x85,0x83,0x80,0x7E,0x7E,0x7C,0x7C,0x7D,0x7F,0x82,0x82,0x82,0x82,0x80,0x7F,0x7C,0x7A,0x7A,0x7A,0x7B,0x7D,0x7F,0x81,0x82,0x84,0x85,0x84,0x83,0x81,0x7F,0x7C,0x7B,0x7A,0x7A,0x7B,0x7A,0x7B,0x7C,0x7D,0x7D,0x7E,0x80,0x81,0x82,0x84,0x85,0x87,0x88,0x88,0x87,0x85,0x83,0x81,0x7F
,0x7D,0x7D,0x7D,0x7F,0x80,0x81,0x84,0x85,0x85,0x83,0x81,0x80,0x7E,0x7E,0x7E,0x7E,0x7F,0x80,0x82,0x83,0x83,0x83,0x82,0x81,0x7F,0x7D,0x7C,0x7C,0x7B,0x7C,0x7E,0x7E,0x80,0x83,0x86,0x88,0x87,0x86,0x81,0x7C,0x77,0x74,0x76,0x7B,0x84,0x8B,0x90,0x8E,0x89,0x81,0x7B,0x76,0x76,0x78,0x7D,0x82,0x84,0x86,0x87,0x85,0x83,0x83,0x80,0x7E,0x7A,0x78,0x76,0x78,0x7C,0x82,0x84,0x84,0x7F,0x7B,0x76,0x73,0x75,0x77,0x7E,0x82,0x87,0x88,0x88,0x86,0x82,0x80,0x7B,0x76,0x77,0x78,0x7C,0x81,0x87,0x8D,0x8D,0x8B,0x86,0x7F,0x7A,0x78
//,0x79,0x7D,0x82,0x89,0x8D,0x8F,0x90,0x88,0x84,0x7A,0x6F,0x6A,0x68,0x6A,0x74,0x7A,0x80,0x83,0x82,0x80,0x7A,0x72,0x70,0x73,0x78,0x82,0x8B,0x92,0x97,0x96,0x8C,0x82,0x7A,0x72,0x75,0x7C,0x88,0x96,0x9F,0xA2,0x9D,0x95,0x8B,0x82,0x7E,0x7D,0x7E,0x80,0x7F,0x7C,0x75,0x6A,0x64,0x5E,0x5A,0x5C,0x5F,0x64,0x69,0x70,0x74,0x7B,0x84,0x87,0x8A,0x8B,0x88,0x85,0x83,0x83,0x89,0x91,0x99,0x9F,0xA0,0x9E,0x96,0x8F,0x89,0x87,0x8B,0x90,0x96,0x95,0x92,0x8A,0x82,0x79,0x73,0x70,0x6E,0x6F,0x6E,0x6B,0x6A,0x65,0x63,0x65,0x6A,0x6E
#endif
,0x75,0x79,0x7C,0x7E,0x7E,0x7F,0x81,0x84,0x8A,0x8E,0x8F,0x90,0x8F,0x8D,0x89,0x87,0x86,0x88,0x88,0x8A,0x8B,0x8A,0x88,0x86,0x84,0x82,0x80,0x80,0x7E,0x7F,0x7D,0x7C,0x7A,0x77,0x74,0x72,0x74,0x75,0x78,0x79,0x7A,0x7A,0x7A,0x78,0x79,0x7B,0x7D,0x7E,0x82,0x83,0x84,0x82,0x82,0x84,0x86,0x8A,0x8F,0x92,0x93,0x92,0x90,0x8B,0x86,0x83,0x7F,0x7B,0x7B,0x79,0x77,0x73,0x6F,0x6C,0x6B,0x6B,0x6C,0x71,0x75,0x7A,0x7D,0x7F,0x81,0x83,0x85,0x87,0x8A,0x8E,0x90,0x91,0x91,0x90,0x8F,0x8C,0x89,0x88,0x85,0x82,0x81,0x7F,0x7C,0x7A
//,0x77,0x73,0x74,0x73,0x75,0x78,0x79,0x7D,0x7E,0x7C,0x7B,0x7A,0x7B,0x7D,0x82,0x84,0x84,0x84,0x82,0x80,0x7D,0x7D,0x7D,0x7F,0x82,0x85,0x85,0x86,0x85,0x84,0x84,0x85,0x87,0x88,0x8B,0x8C,0x8D,0x8A,0x89,0x87,0x87,0x85,0x83,0x80,0x7B,0x7A,0x76,0x75,0x73,0x71,0x6F,0x6F,0x70,0x70,0x70,0x72,0x75,0x79,0x7E,0x83,0x87,0x8A,0x8B,0x8E,0x90,0x90,0x91,0x91,0x92,0x91,0x8E,0x8C,0x87,0x83,0x80,0x7C,0x7A,0x77,0x76,0x76,0x75,0x75,0x75,0x75,0x76,0x78,0x7A,0x7C,0x7E,0x80,0x81,0x82,0x83,0x84,0x83,0x82,0x82,0x82,0x80,0x81
///////////////,0x81,0x80,0x80,0x7F,0x7F,0x7F,0x81,0x82,0x83,0x85,0x85,0x87,0x89,0x88,0x89,0x88,0x87,0x86,0x84,0x82,0x7F,0x7C,0x79,0x75,0x73,0x71,0x6F,0x6E,0x6F,0x71,0x73,0x76,0x7A,0x7F,0x83,0x88,0x8B,0x8F,0x90,0x91,0x92,0x92,0x90,0x8F,0x8C,0x88,0x84,0x81,0x7D,0x79,0x77,0x75,0x73,0x73,0x74,0x75,0x76,0x79,0x7A,0x7E,0x81,0x83,0x85,0x85,0x86,0x86,0x86,0x84,0x83,0x81,0x7E,0x7C,0x7B,0x7A,0x7A,0x7A,0x7C,0x7D,0x81,0x83,0x85,0x88,0x8B,0x8C,0x8D,0x8C,0x8D,0x8C,0x89,0x85,0x81,0x7D,0x78,0x75,0x72,0x70,0x6F,0x6F,0x70,0x72
//,0x75,0x78,0x7C,0x80,0x85,0x8A,0x8D,0x8F,0x91,0x91,0x90,0x8D,0x8A,0x87,0x83,0x80,0x7B,0x7A,0x77,0x75,0x75,0x75,0x77,0x78,0x7A,0x7E,0x82,0x85,0x88,0x89,0x89,0x8A,0x89,0x87,0x85,0x81,0x7D,0x79,0x76,0x75,0x74,0x72,0x75,0x77,0x7A,0x7F,0x81,0x86,0x89,0x8B,0x8E,0x8F,0x8F,0x8D,0x8B,0x88,0x84,0x80,0x7B,0x78,0x74,0x72,0x72,0x72,0x72,0x75,0x79,0x7E,0x81,0x82,0x86,0x8B,0x8E,0x8F,0x8E,0x8C,0x88,0x85,0x80,0x7F,0x7A,0x77,0x76,0x76,0x77,0x77,0x78,0x7C,0x7E,0x85,0x88,0x89,0x8B,0x8B,0x8B,0x89,0x86,0x81,0x7D,0x7A
////////////////,0x76,0x75,0x73,0x72,0x74,0x76,0x7A,0x7E,0x84,0x87,0x8B,0x8D,0x8F,0x8E,0x8D,0x8C,0x89,0x86,0x80,0x7C,0x78,0x74,0x71,0x70,0x72,0x75,0x78,0x7B,0x80,0x83,0x87,0x89,0x8A,0x8A,0x89,0x87,0x86,0x82,0x7F,0x7D,0x7A,0x79,0x79,0x79,0x79,0x7B,0x7F,0x82,0x86,0x87,0x8A,0x8B,0x8C,0x8B,0x89,0x86,0x83,0x7F,0x7A,0x77,0x75,0x73,0x72,0x72,0x75,0x78,0x7B,0x80,0x82,0x86,0x88,0x89,0x8A,0x89,0x87,0x86,0x83,0x81,0x7E,0x7D,0x7B,0x7B,0x7C,0x7E,0x81,0x83,0x84,0x87,0x87,0x87,0x86,0x85,0x83,0x7E,0x7C,0x79,0x77,0x75,0x74,0x75
//,0x75,0x77,0x7A,0x7E,0x81,0x86,0x89,0x8A,0x8B,0x8B,0x8A,0x88,0x85,0x82,0x7F,0x7D,0x7B,0x7A,0x7B,0x7C,0x7E,0x80,0x81,0x83,0x85,0x86,0x86,0x85,0x84,0x82,0x7F,0x7D,0x79,0x76,0x76,0x77,0x78,0x79,0x7C,0x80,0x83,0x87,0x8A,0x8A,0x8A,0x8A,0x89,0x85,0x81,0x80,0x7D,0x79,0x78,0x78,0x78,0x7A,0x7C,0x7F,0x84,0x86,0x87,0x88,0x88,0x86,0x83,0x81,0x7E,0x7A,0x77,0x77,0x77,0x78,0x7A,0x7C,0x81,0x84,0x86,0x8A,0x8A,0x8A,0x89,0x87,0x84,0x80,0x7B,0x79,0x76,0x75,0x77,0x78,0x7A,0x7D,0x82,0x86,0x88,0x8A,0x89,0x88,0x87,0x83
//,0x7F,0x7B,0x78,0x77,0x75,0x76,0x78,0x7B,0x7F,0x83,0x87,0x8A,0x8C,0x8C,0x8B,0x87,0x83,0x7F,0x7A,0x77,0x74,0x73,0x75,0x77,0x7B,0x7F,0x85,0x88,0x8B,0x8D,0x8C,0x8A,0x87,0x82,0x7D,0x79,0x75,0x73,0x74,0x76,0x79,0x7D,0x82,0x86,0x8A,0x8C,0x8D,0x8B,0x88,0x83,0x7F,0x79,0x76,0x74,0x73,0x74,0x78,0x7D,0x82,0x87,0x8B,0x8D,0x8F,0x8E,0x8A,0x87,0x81,0x7C,0x76,0x74,0x70,0x71,0x78,0x79,0x7D,0x84,0x88,0x8B,0x8C,0x8C,0x8A,0x88,0x85,0x7E,0x7A,0x76,0x73,0x74,0x76,0x79,0x7E,0x84,0x85,0x87,0x88,0x85,0x81,0x7D,0x79,0x77
////////,0x74,0x75,0x76,0x78,0x7C,0x80,0x84,0x87,0x8A,0x8C,0x8C,0x8A,0x87,0x84,0x7F,0x7C,0x7A,0x79,0x7D,0x81,0x86,0x8A,0x8E,0x91,0x90,0x8E,0x8B,0x86,0x7E,0x79,0x74,0x71,0x6F,0x6F,0x71,0x74,0x78,0x7E,0x83,0x86,0x88,0x89,0x87,0x85,0x83,0x81,0x80,0x7F,0x81,0x83,0x86,0x88,0x89,0x87,0x86,0x83,0x7F,0x7B,0x77,0x74,0x72,0x72,0x74,0x76,0x7A,0x7F,0x86,0x8B,0x8D,0x8F,0x8E,0x8B,0x87,0x81,0x7D,0x7A,0x7A,0x7B,0x7E,0x81,0x85,0x86,0x87,0x86,0x85,0x82,0x7E,0x7A,0x76,0x75,0x72,0x74,0x76,0x7A,0x7E,0x82,0x83,0x82,0x81,0x7F
//,0x7B,0x78,0x77,0x77,0x77,0x7A,0x7E,0x80,0x82,0x84,0x86,0x86,0x84,0x83,0x82,0x7D,0x7B,0x7A,0x79,0x7B,0x7E,0x82,0x89,0x8E,0x92,0x95,0x95,0x91,0x8C,0x87,0x81,0x7C,0x7A,0x78,0x79,0x7D,0x7D,0x7F,0x7F,0x7F,0x7E,0x7C,0x7A,0x79,0x79,0x79,0x79,0x7C,0x80,0x86,0x8C,0x93,0x96,0x93,0x8B,0x7F,0x72,0x6A,0x69,0x69,0x6E,0x74,0x7A,0x7F,0x83,0x87,0x88,0x88,0x87,0x86,0x85,0x83,0x82,0x83,0x84,0x86,0x89,0x8E,0x91,0x91,0x8F,0x89,0x80,0x76,0x6D,0x6B,0x6B,0x6E,0x74,0x7B,0x83,0x89,0x89,0x87,0x81,0x79,0x74,0x73,0x76,0x7B
//////////////,0x82,0x86,0x8E,0x92,0x94,0x91,0x8D,0x87,0x7F,0x78,0x73,0x70,0x73,0x77,0x7D,0x82,0x86,0x88,0x86,0x7F,0x7A,0x75,0x72,0x73,0x77,0x7F,0x89,0x92,0x97,0x96,0x91,0x88,0x7E,0x75,0x71,0x70,0x75,0x7B,0x82,0x85,0x87,0x86,0x83,0x7D,0x76,0x71,0x70,0x73,0x79,0x83,0x8E,0x96,0x98,0x96,0x8E,0x85,0x7B,0x74,0x6F,0x73,0x79,0x81,0x89,0x8D,0x8C,0x85,0x7D,0x72,0x6B,0x69,0x70,0x7A,0x87,0x92,0x99,0x9A,0x94,0x8A,0x7E,0x76,0x72,0x74,0x7A,0x83,0x8A,0x8E,0x8A,0x83,0x77,0x6E,0x68,0x67,0x6F,0x7B,0x86,0x91,0x96,0x94,0x8D,0x84
//,0x7A,0x75,0x77,0x7D,0x87,0x90,0x94,0x92,0x89,0x7D,0x6E,0x65,0x61,0x66,0x71,0x7C,0x86,0x89,0x88,0x7D,0x74,0x6D,0x6D,0x74,0x80,0x8F,0x99,0x9E,0x97,0x8D,0x7E,0x72,0x6C,0x6F,0x7A,0x84,0x8D,0x8E,0x8B,0x80,0x75,0x6C,0x6C,0x75,0x82,0x92,0x9B,0x9F,0x99,0x8E,0x83,0x7B,0x7C,0x81,0x8B,0x93,0x96,0x91,0x86,0x77,0x6C,0x68,0x6B,0x76,0x82,0x8B,0x8C,0x87,0x7B,0x73,0x6C,0x6E,0x76,0x80,0x89,0x8A,0x85,0x7A,0x70,0x69,0x6A,0x72,0x7E,0x89,0x8E,0x8E,0x87,0x7D,0x79,0x7A,0x82,0x8D,0x9A,0x9E,0x9D,0x93,0x88,0x7F,0x7B,0x7E
///////,0x85,0x8C,0x8F,0x8C,0x83,0x79,0x72,0x70,0x75,0x7D,0x85,0x88,0x85,0x7E,0x74,0x6F,0x6D,0x73,0x78,0x7D,0x7E,0x7B,0x74,0x6D,0x6B,0x6E,0x75,0x7C,0x82,0x83,0x81,0x7E,0x7C,0x7E,0x82,0x89,0x8E,0x90,0x90,0x8B,0x88,0x85,0x84,0x85,0x86,0x86,0x85,0x85,0x83,0x81,0x81,0x81,0x82,0x83,0x82,0x83,0x83,0x81,0x82,0x80,0x7E,0x7C,0x79,0x76,0x75,0x75,0x75,0x74,0x74,0x73,0x73,0x74,0x74,0x78,0x7B,0x7D,0x7F,0x81,0x82,0x83,0x84,0x83,0x84,0x84,0x84,0x84,0x83,0x82,0x81,0x81,0x80,0x82,0x84,0x85,0x87,0x88,0x87,0x88,0x88,0x88
//,0x89,0x88,0x88,0x87,0x85,0x82,0x7F,0x7C,0x7B,0x79,0x78,0x77,0x78,0x78,0x78,0x79,0x7A,0x7B,0x7C,0x7E,0x7F,0x80,0x7F,0x7F,0x7F,0x7D,0x7D,0x7C,0x7D,0x7D,0x7E,0x7D,0x7D,0x7D,0x7F,0x82,0x86,0x88,0x8B,0x8B,0x8B,0x8A,0x88,0x89,0x88,0x86,0x85,0x83,0x82,0x81,0x80,0x7E,0x7D,0x7D,0x7E,0x7F,0x80,0x81,0x81,0x80,0x80,0x80,0x80,0x7F,0x7E,0x7D,0x7B,0x7C,0x7A,0x79,0x77,0x78,0x78,0x7A,0x7C,0x7E,0x80,0x80,0x82,0x83,0x84,0x84,0x84,0x85,0x85,0x85,0x82,0x81,0x80,0x7F,0x81,0x81,0x81,0x82,0x84,0x84,0x85,0x84,0x85,0x83
//,0x85,0x85,0x84,0x82,0x80,0x7E,0x7C,0x7B,0x7B,0x7A,0x7B,0x7C,0x7D,0x7E,0x7E,0x7F,0x80,0x81,0x81,0x81,0x81,0x80,0x7F,0x7E,0x7D,0x7C,0x7B,0x7C,0x7D,0x7F,0x80,0x81,0x83,0x84,0x85,0x86,0x85,0x84,0x85,0x83,0x82,0x80,0x80,0x7E,0x7D,0x7F,0x7F,0x80,0x81,0x82,0x83,0x83,0x84,0x83,0x82,0x82,0x81,0x7F,0x7D,0x7C,0x7B,0x7B,0x7A,0x7B,0x7D,0x80,0x81,0x82,0x84,0x84,0x83,0x82,0x81,0x7E,0x7E,0x7D,0x7C,0x7C,0x7D,0x7D,0x80,0x81,0x83,0x83,0x86,0x86,0x86,0x85,0x83,0x82,0x7F,0x7E,0x7C,0x7B,0x7D,0x7E,0x7E,0x81,0x82,0x84
//,0x85,0x85,0x85,0x83,0x81,0x7F,0x7D,0x7B,0x79,0x7A,0x7A,0x7B,0x7D,0x80,0x83,0x85,0x86,0x85,0x84,0x82,0x7F,0x7E,0x7C,0x7B,0x7B,0x7C,0x7E,0x81,0x84,0x86,0x86,0x85,0x83,0x7F,0x7B,0x7B,0x7B,0x7C,0x7E,0x7F,0x84,0x84,0x85,0x84,0x84,0x83,0x81,0x7F,0x7C,0x7B,0x7A,0x7C,0x7C,0x7E,0x80,0x84,0x85,0x86,0x82,0x81,0x7F,0x7D,0x7A,0x79,0x7A,0x7D,0x80,0x83,0x84,0x85,0x86,0x85,0x82,0x7E,0x7C,0x7B,0x7B,0x7A,0x7B,0x7E,0x83,0x86,0x86,0x85,0x83,0x81,0x80,0x7C,0x7A,0x79,0x7B,0x7E,0x81,0x84,0x86,0x86,0x83,0x83,0x7E,0x7B
//,0x79,0x79,0x7B,0x7F,0x82,0x84,0x86,0x86,0x85,0x82,0x7E,0x7B,0x79,0x7A,0x7D,0x7E,0x81,0x84,0x87,0x86,0x83,0x7E,0x7C,0x7B,0x7A,0x7B,0x7E,0x81,0x85,0x86,0x86,0x83,0x81,0x7E,0x7B,0x7B,0x7C,0x7D,0x82,0x85,0x86,0x86,0x83,0x80,0x7C,0x7C,0x7B,0x7D,0x7F,0x82,0x84,0x85,0x84,0x81,0x7F,0x7C,0x7B,0x7B,0x7E,0x81,0x84,0x85,0x85,0x82,0x7F,0x7E,0x7D,0x7D,0x7E,0x81,0x83,0x84,0x83,0x81,0x7F,0x7C,0x7C,0x7D,0x7F,0x81,0x82,0x83,0x83,0x80,0x7F,0x7D,0x7D,0x7E,0x7F,0x81,0x82,0x83,0x82,0x80,0x7F,0x7E,0x7E,0x7F,0x80,0x82
//,0x83,0x82,0x81,0x80,0x7F,0x7E,0x80,0x7F,0x80,0x81,0x81,0x80,0x80,0x7F,0x81,0x80,0x80,0x81,0x80,0x80,0x81,0x80,0x80,0x81,0x80,0x80,0x80,0x80,0x7F,0x80,0x80,0x80,0x80,0x80,0x7F,0x80,0x80
};
/* end binary data. size = 2737 bytes */


 uint8_t Robonii_Sound_Driver::apply_sound_volume(void)
{
  uint8_t 
    current_sound_volume;

  // Volume from 0 (mute) to 9 (loudest)
  current_sound_volume = 2;
  
  if (current_sound_volume == 0) 
    return current_sound_volume; // mute


  sound_volume_mult = 1;
  sound_volume_div = 1;
  // 0 is mute
  // 1 .. 9 is louder, with default level at 7
  if (current_sound_volume >= 9)
  {
    sound_volume_mult = 3;
    sound_volume_div = 2;
    return current_sound_volume;
  }
  if (current_sound_volume >= 8)
  {
    sound_volume_mult = 5;
    sound_volume_div = 5;
    return current_sound_volume;
  }
  sound_volume_div = 8 - current_sound_volume;
  return current_sound_volume;
}




static uint16_t sound_offset,sound_factor;

Robonii_Sound_Driver::Robonii_Sound_Driver()
{
	InitSound();	
}

/**
 * \brief Initialize Sound. 
 *
 * This function initializes timer/counter5 by setting the appropriate register 
 * values. Specifically, the Output Compare Match registers are configured.
 * \param  none
 * \return void
*/
void Robonii_Sound_Driver::InitSound()
{
  // System clock = peripheral clock = 15.5MHz
  TCE1.CTRLA = TC_CLKSEL_DIV1_gc;
//  ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc; //no prescaler
  // Peripheral clock is 15.5 Mhz, divide by 1937 to get 8 Mhz sample clock
  //TCE1.PERBUF = 1937; 
  TCE1.PERBUF = 2000;
  
  TCE1.INTCTRLA = ( TCE1.INTCTRLA & ~TC1_OVFINTLVL_gm ); // qqqqqq | TC_OVFINTLVL_HI_gc; //set interupt level for Overflow as high
  
  //Setup Timer PWM_TC for generating a PWM
  DISABLE_SOUND_PWM;
  DISABLE_SOUND_AMP;
  
  //Set compare output
  PORTE.DIRSET = PIN2_bm;

  // Use slew rate limiting on PWM sound output
  PORTE.PIN2CTRL |= PORT_SRLEN_bm;

	// Configure the TC for single slope mode.
  TCE0.CTRLB = ( TCE0.CTRLB & ~TC0_WGMODE_gm ) | TC_WGMODE_SS_gc;

	// Start timer by selecting a clock source.
  TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
//  ( PWM_TC.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;

  // Use TCE0 in 8-bit mode (simplifies DMA buffering)
  TCE0.CTRLE |= TC0_BYTEM_bm;

  TCE0.PERBUF = 255; // Period full 8 bits for basic sound PWM

  // Initialize global variables.
  toneFrequency = 0x00;
	toneCounter = 0x00;		
	
  sound_offset = 100;
  sound_factor = 5;
  
  TimerD1A.initialize();

} 


/**
 * \brief ISR TCE1_OVF_vect Interrupt Handler. 
 *
 * 	 
 * \param  none
 * \return void
*/

//ISR(TCE1_OVF_vect)
//{
  
  //TODO: TIAN
/*
  // This ISR is only there to clear the OVF flag (used by DMA)
  if (simpleToneCountDirection == 255)
    simpleToneCountDirection = 0;
  else
    simpleToneCountDirection = 255;

  TCE0.CCCBUF = simpleToneCountDirection >> soundVolume;

*/

//}

 void StartSound()
{
  // use sine wave as basis for all sounds
  flashStart = GET_FAR_ADDRESS(sinetableshort);
  flashLen = sizeof(sinetableshort);
  flashPlayCount = flashLen; // does not really matter, should change to buffer size
  flashSoundActive = 1;
  stepSize = 1;
  current_sound_type = sound_type_e(0);

  toneCounter = 0;

//TODO:Tian Load here
  //read old tones the same way as before
  TimerD1A.attachInterrupt6( &LoadNextSimpleTone, SoundArray.sToneLength[toneCounter]*10);

  // todo: check translation
  if (SoundArray.cToneFrequency[toneCounter] == 255)
  {
    // Silence
    TCE1.PERBUF = 0xFFFF;
  }
  else
  {
    // Normal tone
    uint16_t timerVal = sound_offset +  SoundArray.cToneFrequency[toneCounter] * sound_factor;
    TCE1.PERBUF = timerVal;
  }


  current_sound_type = SOUND_TONE;
  buffer_switched = 0;

  Robonii_Sounds.dma_play_sound(); // duration in ms 

}



 void DisableSound(void)
{
//	DISABLE_SOUND_PWM;
  DISABLE_SOUND_AMP;
}


/**
 * \brief StopTone (Warning Tone). 
 *
 * This function terminates the currently playing tone when it's duration expires.
 * In addition to this, it also evaluates the current status of the priority queue
 * in order to establish if a sound with a higher priority needs to be executed.
 * \param  none
 * \return void
*/		
 void Robonii_Sound_Driver::StopSound()
{
  current_sound_type = SOUND_NONE;
  prev_sound_priority = SoundPriority(0);

  // Disable DMA interrupt
  DMA_DisableChannel( &DMA.CH0 );  
  DMA_SetIntLevel( &DMA.CH0, DMA_CH_TRNINTLVL_OFF_gc, DMA_CH_ERRINTLVL_OFF_gc ); 

  // Set timer to disable sound chip, leave time for DC to subside
  TimerD1A.attachInterrupt6( DisableSound, 10*10);	 //TODO: Tian									

  // Set PWM output to zero, will erode DC offset to avoid click when amp is switched off
	DISABLE_SOUND_PWM;
	DISABLE_SOUND_AMP;

//qqqq 
#warning DISABLE_SOUND_AMP immediately or with timer, not both
}



 void LoadNextSimpleTone()
{
  toneCounter++; 
  /** Check if there are more tones to play. */
	if(toneCounter < arraySize)
	{
    // todo: check translation
    uint16_t timerVal = sound_offset +  SoundArray.cToneFrequency[toneCounter] * sound_factor;
    TCE1.PERBUF = timerVal;

		TimerD1A.attachInterrupt6( LoadNextSimpleTone, SoundArray.sToneLength[toneCounter]);		//TODO: Tian									
	}
	else
	{
		Robonii_Sounds.StopSound();
	}		
	return;	
}



void Robonii_Sound_Driver::PlayAdvancedSound(uint8_t soundNumber)
{
  stepSize = 1;

  if(soundNumber == 0)
  {  
    flashStart = GET_FAR_ADDRESS(laser);
    flashLen = sizeof(laser);
    flashPlayCount = flashLen;;
   // stepSize = 10;
  }
  else if(soundNumber == 1)
  {  
    flashStart = GET_FAR_ADDRESS(refuel);
    flashLen = sizeof(refuel);
    flashPlayCount = flashLen * 6;
   // stepSize = 10;
  }
  else if (soundNumber == 2)
  {
    flashStart = GET_FAR_ADDRESS(irritated);
    flashLen = sizeof(irritated);
    flashPlayCount = flashLen;
  }
  else if (soundNumber == 3)
  {
    flashStart = GET_FAR_ADDRESS(ah);
    flashLen = sizeof(ah);
    flashPlayCount = flashLen;
  }
#ifdef SOUND_TEST
  else if (soundNumber == 4)
  {
    flashStart = GET_FAR_ADDRESS(snd_disappointed);
    flashLen = sizeof(snd_disappointed);
    flashPlayCount = flashLen;
  }
  else if (soundNumber == 5)
  {
    flashStart = GET_FAR_ADDRESS(snd_laugh);
    flashLen = sizeof(snd_laugh);
    flashPlayCount = flashLen;
  }
  else if (soundNumber == 6)
  {
    flashStart = GET_FAR_ADDRESS(snd_veryhappy);
    flashLen = sizeof(snd_veryhappy);
    flashPlayCount = flashLen;
  }
  else if (soundNumber == 7)
  {
    flashStart = GET_FAR_ADDRESS(snd_hallo);
    flashLen = sizeof(snd_hallo);
    flashPlayCount = flashLen;
  }
  else if(soundNumber == 8)
  {  
    flashStart = GET_FAR_ADDRESS(sinetable);
    flashLen = sizeof(sinetable);
    flashPlayCount = 24000;
   // stepSize = 10;
  }
  else if(soundNumber == 9)
  {  
    flashStart = GET_FAR_ADDRESS(illbeback);
    flashLen = sizeof(illbeback);
    flashPlayCount = flashLen;;
   // stepSize = 10;
  }
  else if(soundNumber == 10)
  {  
    flashStart = GET_FAR_ADDRESS(sinetable);
    flashLen = sizeof(sinetable);
    flashPlayCount = 24000;
  }
  else if (soundNumber == 11)
  {
    flashStart = GET_FAR_ADDRESS(sinetableshort);
    flashLen = sizeof(sinetableshort);
    flashPlayCount = 24000;
  }
#endif
  else
  {
    // Error ignore
    return;
  }
  flashSoundActive = 1;

  current_sound_type = SOUND_WAV;
  buffer_switched = 0;

  dma_play_sound();      

} 




/**
 * \brief PlaySound. 
 *
 * This function will construct the audio arrays required to play the designated
 * sound. These arrays will then be passed to SoundGenerator in order to start
 * the process of playing the sound. 
 * \param  tuneNumber The numeric identifier of the predefined tone to execute.
 * \param  priority This number is used to know if a sound should be loaded, depending on 
 *		   the priority of the sound currently loaded. 	
 * \return void
*/


/**
 * \brief NextTone. 
 *
 * This function gets the last tune duration.
 * \param  tone Frequency of the tone to add.
 * \param  duration Duration of the tone to add.	
 * \return void
*/
 void Robonii_Sound_Driver::NextTone(unsigned char tone, int duration)
{
	/**
	 * This function can only be called from PlaySound() or ConstructSound(),
	 * since no physical memory is allocated otherwise.
	*/
	if (currentIndex < SOUNDARRAYSIZE)
	{
    // Add tone & duration to global sound array
    if (tone < 30) tone = 30;
    SoundArray.cToneFrequency[currentIndex] = tone;
    SoundArray.sToneLength[currentIndex] = duration;
    currentIndex++;
	}
}

/**
 * \brief RampUp. 
 *
 * This function ramps up the tone's pitch.
 * \param  startTone 
 * \param  endTone
 * \parem  duration
 * \param  icrementTone	
 * \return void
*/
 void Robonii_Sound_Driver::RampUp(unsigned char startTone, unsigned char endTone, int duration, unsigned char incrementTone)
{
	/** 
	 * This function can only be called from PlaySound() or ConstructSound(),
	 * since no physical memory is allocated otherwise.
	*/

  if (endTone > startTone)
    return;

	unsigned char i;
	for (i = startTone; i >= endTone; i = i - incrementTone)
	{
  		NextTone(i,duration);
	}
}

/**
 * \brief Warble. 
 *
 * This function increases the tone intensity and varies the rampup direction.
 * \param  tone 
 * \param  intensity
 * \param  rampDirection
 * \param  duration	
 * \return void
*/
 void Robonii_Sound_Driver::Warble(unsigned char tone, int intensity, signed char rampDirection, int duration)
{
  	/**
	 * This function can only be called from PlaySound() or ConstructSound(),
	 * since no physical memory is allocated otherwise.
	 */
	
	unsigned char i;
  if (duration > 255)
    duration = 255;

	for (i = 0; i < duration; i++)
  	{
    	if (i%4 == 0)
		{
			NextTone(tone + (i * rampDirection), intensity);
		}
		else if (i%4 == 1)
		{
			NextTone(tone + ((5 + i) * rampDirection), intensity);
		}
		else if (i%4 == 2)
		{
		 	NextTone(tone + ((15 + i) * rampDirection), intensity);
		}
		else
		{
		    NextTone(tone + ((30 + i) * rampDirection), intensity);
		}
	}
}


/**
 * \brief CentreOffsetSound. 
 *
 * Loads tones into the sound buffer that plays opposing tones based on a starting tone. 
 * The tones will use an offset to determine the start / end tone.
 * \param  midTone The central tone
 * \param  offset the amount to offset with (midTone + or - offset), affects total length
 * \param  intensity the length of each tone              
 * \param  increment tone amount to 'jump' by each cycle
 * \param  rampOut move away from (true) or towards (false) the midTone	
 * \return void
*/
 void Robonii_Sound_Driver::CentreOffsetSound(uint8_t midTone, uint8_t offset, uint8_t intensity, uint8_t increment, bool rampOut)
{

	uint8_t currentOffset = rampOut ? increment : offset;
	bool done = 0;

	while (!done)
	{
		NextTone(midTone + currentOffset, intensity);
		NextTone(midTone - currentOffset, intensity);

		if (rampOut)
		{
			currentOffset += increment;
			if (currentOffset > offset)
			 	done = 1;
		}
		else
		{
			currentOffset -= increment;
			if (currentOffset <= 0)
				done = 1;
		}
	}
} 

/**
 * \brief RampDown. 
 *
 * This function ramps down the tone's pitch.
 * \param  startTone 
 * \param  endTone
 * \parem  duration
 * \param  decrementTone	
 * \return void
*/
 void Robonii_Sound_Driver::RampDown(unsigned char startTone, unsigned char endTone, int duration, unsigned char decrementTone)
{
	unsigned char i;		

  if (endTone < startTone)
    return;
	for (i = startTone; i < endTone; i = i + decrementTone)
	{
  		NextTone(i, duration);
	}
}



// Load dma - always loads in passive buffer
 uint16_t Robonii_Sound_Driver::load_dma_buffer(void)
{
  int16_t sound_index;
  uint8_t sample; 
  uint8_t adj_sample;
  int16_t adj_sample16;
  uint8_t *soundbuf;

  // Use passive buffer for load operation
  if (active_buffer == 0)
    soundbuf = sound_buffer1;
  else
    soundbuf = sound_buffer0;

  sound_index = 0;

  if (flashSoundActive != 0)
  {
    while (sound_index < SOUND_BUFFER_SIZE)
    {
      sample = pgm_read_byte_far	(flashStart + currentFlashIndex);

      // Increment 
      currentFlashIndex = (currentFlashIndex + stepSize);

      if (currentFlashIndex > flashLen)
      {
        currentFlashIndex = (currentFlashIndex - flashLen);
      }

      flashPlayCount--;
      if (flashPlayCount <= 0)
      {
        flashSoundActive = 0;
        return sound_index;
      }
      else
      {
        // Samples are from 0 to 255  effectively signed, so +127 to -128
        // Adjust for volume
        adj_sample16 = (sample - 128) * (int16_t)sound_volume_mult / (int16_t)sound_volume_div;
//        adj_sample = (uint8_t) ((uint16_t)sample * (uint16_t)sound_volume_mult / (uint16_t)sound_volume_div);
      //  adj_sample16 += 128;
        if (adj_sample16 > 127)
          adj_sample16 = 127;
        else if (adj_sample16 < -128)
          adj_sample16 = -128;
        // Adjust offset for volume to avoid large clicks on low volume
        if (sound_volume_mult == 1)
        {
           adj_sample = adj_sample16 + (128 / sound_volume_div);
        }
        else
        {
           adj_sample = adj_sample16 + 128;
        }


        *soundbuf = adj_sample;
        soundbuf++;
      }
      sound_index++;
    }
  }
  return sound_index;
}


volatile DMA_CH_t *Channel;


 void Robonii_Sound_Driver::dma_buffer_switch(void)
{
// todo: disable interrupts for this
  buffer_switched = 1;
  if (active_buffer == 0)
    active_buffer = 1;
  else
    active_buffer = 0;
}


// Call from main loop, fill next buffer
void Robonii_Sound_Driver::sound_task(void)
{
  if (buffer_switched != 0)
  {
    buffer_switched = 0;
    next_buffer_length = load_dma_buffer();
  }
}

 void Robonii_Sound_Driver::dma_play_sound( void )
{
  uint16_t sound_length;

  currentFlashIndex = 0;

	Channel = &DMA.CH0;

	DMA_Enable();

  DMA_DisableChannel( Channel );

  // When sound is played, load passive buffer as 0, start DMA from buffer 0
  active_buffer = 1;
  buffer_switched = 0;

  // Load values, this will put it in buffer 0 (passive)
  sound_length = load_dma_buffer();

  // Setup dma to transfer single byte with src address increment by 1 to fixed destination (ccbuf register)
  // single shot = one burst at a time
  // otherwise it is one block at a time
  if (current_sound_type == SOUND_WAV)
  {
	  DMA_SetupBlock( Channel,
	                  sound_buffer0,
	                  DMA_CH_SRCRELOAD_TRANSACTION_gc,  // reset to start at end of transaction
	                  DMA_CH_SRCDIR_INC_gc,
                    (void *)&TCE0.CCCBUF,
	                  DMA_CH_DESTRELOAD_BURST_gc,
	                  DMA_CH_DESTDIR_INC_gc, // increment (2 x bytes for 16 bit register
	                  sound_length, // block size (bytes)
	                  DMA_CH_BURSTLEN_1BYTE_gc, // needs to write 16 bit register, burst of 2 bytes
	                  1,
	                  false );
    //start reading samples from flash at 8kHz
    TCE1.PERBUF = 1937;

    // Only use DMA interrupt for wave file
    DMA_SetIntLevel( Channel, DMA_CH_TRNINTLVL_HI_gc, DMA_CH_ERRINTLVL_HI_gc );
  }
  else
  {
    // Sine wave, load sine wave, repeat indefinitely
	  DMA_SetupBlock( Channel,
	                  sound_buffer0,
	                  DMA_CH_SRCRELOAD_TRANSACTION_gc,  // reset to start at end of transaction
	                  DMA_CH_SRCDIR_INC_gc,
                    (void *)&TCE0.CCCBUF,
	                  DMA_CH_DESTRELOAD_BURST_gc,
	                  DMA_CH_DESTDIR_INC_gc, // increment (2 x bytes for 16 bit register
	                  sound_length, // block size (bytes)
	                  DMA_CH_BURSTLEN_1BYTE_gc, // needs to write 16 bit register, burst of 2 bytes
	                  0,
	                  true );
    // start reading samples from flash 
    // frequency is set up outside of this (from tone array)
  }

  // No interrupts, only DMA interrupt to reload 
  TCE1.INTCTRLA = ( TCE1.INTCTRLA & ~TC1_OVFINTLVL_gm );

  // Single shot = event causes one burst, not block
  // Burst = 1 byte, block = total buffer size
  DMA_EnableSingleShot (Channel);

	// Select TCE1 overflow as EV 2, used for sample rate to get DMA to use next sample
  // MAC lib uses event channels 0 and 1, set up channel 2
  EVSYS.CH2MUX = EVSYS_CHMUX_TCE1_OVF_gc;

  // set up dma to trigger when event 1 is generated, this is set to TCE1 overflow (125us) = sample rate
  DMA_SetTriggerSource ( Channel,DMA_CH_TRIGSRC_EVSYS_CH2_gc); 


  DMA_EnableChannel( Channel );

  // force buffer switch
  dma_buffer_switch();

  // Start the PWM by enabling Compare channel, this will generate event for DMA to use next sample
  // Start with sample of 128 = bias at 50%

	ENABLE_SOUND_PWM;
  ENABLE_SOUND_AMP;
}




/*! DMA CH0 Interrupt service routine. Clear interrupt flags after check. */
ISR(DMA_CH0_vect)
{
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) 
  {
    // Some error occurred, should never happen
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
    Robonii_Sounds.StopSound();
    return;
	} 

  // Completed one DMA, check if next one should be loaded
  DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;

  if (current_sound_type == SOUND_WAV)
  {
    Robonii_Sounds.dma_buffer_switch();

    if (next_buffer_length == 0)
    {
      Robonii_Sounds.StopSound();
    }
    else
    {
      if (active_buffer == 0)
      {
       	DMA.CH0.SRCADDR0 = (( (uint16_t) sound_buffer0) >> 0*8 ) & 0xFF;
	      DMA.CH0.SRCADDR1 = (( (uint16_t) sound_buffer0) >> 1*8 ) & 0xFF;
	      DMA.CH0.SRCADDR2 = 0;
      }
      else
      {
       	DMA.CH0.SRCADDR0 = (( (uint16_t) sound_buffer1) >> 0*8 ) & 0xFF;
	      DMA.CH0.SRCADDR1 = (( (uint16_t) sound_buffer1) >> 1*8 ) & 0xFF;
	      DMA.CH0.SRCADDR2 = 0;
      }
      // toggle output for debug
//      PORTA.DIRSET = 0x04;
//      PORTA.OUTTGL = 0x04;
	    DMA.CH0.TRFCNT = next_buffer_length;
      DMA_EnableChannel( &DMA.CH0 );
      DMA_StartTransfer ( &DMA.CH0 );
    }
	}
}




/**
 * \brief PlaySound. 
 *
 * This function will construct the audio arrays required to play the designated
 * sound. These arrays will then be passed to SoundGenerator in order to start
 * the process of playing the sound. 
 * \param  tuneNumber The numeric identifier of the predefined tone to execute.
 * \param  priority This number is used to know if a sound should be loaded, depending on 
 *		   the priority of the sound currently loaded. 	
 * \return void
*/


void Robonii_Sound_Driver::PlaySound(unsigned char tuneNumber, unsigned char  priority2)
{
  SoundPriority priority = SoundPriority(priority2);
	const signed char RAMP_UP = -1;
	const signed char RAMP_NONE = 0;
	const signed char RAMP_DOWN = 1;

  if (apply_sound_volume() == 0 || priority <= prev_sound_priority)
  {
    // Mute or Lower sound priority = return
    return;
  }

  if (tuneNumber >= 128)
  {
    PlayAdvancedSound(tuneNumber-128);
    return;
  }

	/** Initialize tones and durations array. */
 	toneFrequency = 0x00;
	toneCounter = 0x00;		
	currentIndex = 0;
	unsigned char i;
	for(i = 0; i < SOUNDARRAYSIZE; i++)
	{
		SoundArray.sToneLength[i] = 0; 
		SoundArray.cToneFrequency[i] = 0; 
	}		

	switch (tuneNumber)
	{
		case 1:	/* Disappointed */
      NextTone (100,50);
      NextTone (90,50);
      NextTone (40,25);
      Warble(130,10,RAMP_NONE,10);
			break;
    case 2: /* Celebrate */
			NextTone(90, 125);
			NextTone(0,100);
			NextTone(90, 125);
			NextTone(0,100);
			NextTone(90, 100);
			NextTone(0,100);
			NextTone(100, 100);
			NextTone(120, 100);
			RampUp(120, 70, 5, 5);
			NextTone(70, 300);
								
			NextTone(0,50);
			NextTone(77, 50);
			NextTone(0,25);
			NextTone(85, 50);

			NextTone(90, 125);
			NextTone(0,100);
			NextTone(90, 125);
			NextTone(0,100);
			NextTone(90, 100);
			NextTone(0,100);
			NextTone(100, 100);
			NextTone(120, 100);
			RampUp(120, 70, 5, 5);
			NextTone(70, 300);			
		 	break;
    case 3: /* Annoy */
			Warble(125,5, RAMP_UP, 30);
			NextTone(0,50);
			Warble(125,5, RAMP_UP, 30);
			NextTone(0,50);
			Warble(125,5, RAMP_UP, 30);
			NextTone(0,50);
			break;
    case 4: /* Ring tone */
			NextTone(50,50);
      NextTone(0,125);
			NextTone(50,50);
      NextTone(0,125);
			NextTone(50,50);
      NextTone(0,125);
      break;
    case  5: /* Warble down */
      Warble(100,10,RAMP_UP,20);
      break;
    case 6: /* Deflate */
      Warble(90,5,RAMP_DOWN,90);
      break;
    case 7: /* Chime up */
      Warble(80,70,RAMP_UP,20);
      break;
    case 8: /* Chime up 2 */
      Warble(100,40,RAMP_UP,20);
      Warble(100,20,RAMP_UP,30);
      Warble(100,10,RAMP_UP,40);
      break;
    case 9: /* Beep-beep */
      NextTone(0,50);
      NextTone(255,30);
      NextTone(0,50);
      break;
    case 10: /* Beep low */
      NextTone(80,75);
      break;
    case 11: /* Beep medium */
      NextTone(60,75);
      break;
    case 12: /* Beep high */
      NextTone(40,50);
      break;
    case 13: /* Chirp up */
      CentreOffsetSound(90,40,50,10,false);
      break;
    case 14: /* Pipbeeb */
      NextTone(100,50);
      NextTone(0,50);
      break;
    case 15: /* Warble up */
			CentreOffsetSound(80, 40, 30, 3, true);
      break;
    case 16: /* Warble up 2 */
			CentreOffsetSound(90, 40, 50, 10, false);
			break;
		case 17: /* Rampup */
			RampUp(120, 70, 50, 5);
			break;
		case 18: /* Siren */
			RampUp(110, 60, 10, 1);
			RampDown(60, 110, 10, 1);
			break;
		case 19: /* Siren up */
			RampUp(105, 55, 10, 1);
			break;
		case 20: /* Siren down */
			RampDown(75, 125, 10, 1);
			break;
		case 0xFF: /** the reset sound */
			NextTone(0, 50);
			break;

   

		default : /** none valid tone */
      return; /* No sound */
			break;
	}
	arraySize = currentIndex;

  // Only save priority when valid sound is specified
  prev_sound_priority = priority;

	StartSound();

	//INCREMENT_DIAGNOSTICS_COUNT( DIAGNOSTICS_SOUND_PLAYED );

}



Robonii_Sound_Driver Robonii_Sounds=Robonii_Sound_Driver();



